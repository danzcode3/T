########### folder lib/myfunc.js
const { 
	proto, 
	delay, 
	downloadContentFromMessage, 
	generateWAMessage, 
	areJidsSameUser, 
	getContentType 
} = require('@whiskeysockets/baileys');
const axios = require('axios');
const moment = require('moment-timezone');
const { sizeFormatter } = require('human-readable');
const util = require('util');
const Jimp = require('jimp');

const unixTimestampSeconds = (date = new Date()) => Math.floor(date.getTime() / 1000);

exports.unixTimestampSeconds = unixTimestampSeconds

exports.generateMessageTag = (epoch) => {
	let tag = (0, exports.unixTimestampSeconds)().toString();
	if (epoch)
	tag += '.--' + epoch;
	return tag;
};

exports.processTime = (timestamp, now) => {
	return moment.duration(now - moment(timestamp * 1000)).asSeconds()
};

exports.getRandom = (ext) => {
	return `${Math.floor(Math.random() * 10000)}${ext}`
};

exports.getBuffer = async (url, options) => {
	try {
		options ? options : {}
		const res = await axios({
			method: "get",
			url,
			headers: {
				'DNT': 1,
				'Upgrade-Insecure-Request': 1
			},
			...options,
			responseType: 'arraybuffer'
		})
		return res.data
	} catch (err) {
		return err
	}
};

exports.getImg = async (url, options) => {
	try {
		options ? options : {}
		const res = await axios({
			method: "get",
			url,
			headers: {
				'DNT': 1,
				'Upgrade-Insecure-Request': 1
			},
			...options,
			responseType: 'arraybuffer'
		})
		return res.data
	} catch (err) {
		return err
	}
};

exports.fetchJson = async (url, options) => {
	try {
		options ? options : {}
		const res = await axios({
			method: 'GET',
			url: url,
			headers: {
				'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36'
			},
			...options
		})
		return res.data
	} catch (err) {
		return err
	}
};

exports.fetchUrl = async (url, options) => {
	try {
		options ? options : {}
		const res = await axios({
			method: 'GET',
			url: url,
			headers: {
				'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36'
			},
			...options
		})
		return res.data
	} catch (err) {
		return err
	}
};

exports.WAVersion = async () => {
	let get = await exports.fetchUrl("https://web.whatsapp.com/check-update?version=1&platform=web")
	let version = [get.currentVersion.replace(/[.]/g, ", ")]
	return version
};

exports.isNumber = (number) => {
	const int = parseInt(number)
	return typeof int === 'number' && !isNaN(int)
};

exports.fetchBuffer = async (url, options) => {
	try {
		options ? options : {}
		const res = await axios({
			method: "GET",
			url,
			headers: {
				"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
				'DNT': 1,
				'Upgrade-Insecure-Request': 1
			},
			...options,
			responseType: 'arraybuffer'
		})
		return res.data
	} catch (err) {
		return err
	}
};

exports.runtime = function(seconds) {
	seconds = Number(seconds);
	var d = Math.floor(seconds / (3600 * 24));
	var h = Math.floor(seconds % (3600 * 24) / 3600);
	var m = Math.floor(seconds % 3600 / 60);
	var s = Math.floor(seconds % 60);
	var dDisplay = d > 0 ? d + (d == 1 ? " day, " : " days, ") : "";
	var hDisplay = h > 0 ? h + (h == 1 ? " hour, " : " hours, ") : "";
	var mDisplay = m > 0 ? m + (m == 1 ? " minute, " : " minutes, ") : "";
	var sDisplay = s > 0 ? s + (s == 1 ? " second" : " seconds") : "";
	return dDisplay + hDisplay + mDisplay + sDisplay;
};

exports.clockString = (ms) => {
	let h = isNaN(ms) ? '--' : Math.floor(ms / 3600000)
	let m = isNaN(ms) ? '--' : Math.floor(ms / 60000) % 60
	let s = isNaN(ms) ? '--' : Math.floor(ms / 1000) % 60
	return [h, m, s].map(v => v.toString().padStart(2, 0)).join(':')
};

exports.sleep = async (ms) => {
	return new Promise(resolve => setTimeout(resolve, ms));
};

exports.isUrl = (url) => {
	return url.match(new RegExp(/https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)/, 'gi'))
};

exports.getTime = (format, date) => {
	if (date) {
		return moment(date).locale('id').format(format)
	} else {
		return moment.tz('Asia/Jakarta').locale('id').format(format)
	}
};

exports.formatDate = (n, locale = 'id') => {
	let d = new Date(n)
	return d.toLocaleDateString(locale, {
		weekday: 'long',
		day: 'numeric',
		month: 'long',
		year: 'numeric',
		hour: 'numeric',
		minute: 'numeric',
		second: 'numeric'
	})
};

exports.formatp = sizeFormatter({
	std: 'JEDEC',
	decimalPlaces: 2,
	keepTrailingZeroes: false,
	render: (literal, symbol) => `${literal} ${symbol}B`,
});

exports.json = (string) => {
	return JSON.stringify(string, null, 2)
};

function format(...args) {
	return util.format(...args)
};

exports.logic = (check, inp, out) => {
	if (inp.length !== out.length) throw new Error('Input and Output must have same length')
	for (let i in inp)
	if (util.isDeepStrictEqual(check, inp[i])) return out[i]
	return null
};

exports.generateProfilePicture = async (buffer) => {
	const jimp = await Jimp.read(buffer)
	const min = jimp.getWidth()
	const max = jimp.getHeight()
	const cropped = jimp.crop(0, 0, min, max)
	return {
		img: await cropped.scaleToFit(720, 720).getBufferAsync(Jimp.MIME_JPEG),
		preview: await cropped.scaleToFit(720, 720).getBufferAsync(Jimp.MIME_JPEG)
	}
};

exports.bytesToSize = (bytes, decimals = 2) => {
	if (bytes === 0) return '0 Bytes';
	const k = 1024;
	const dm = decimals < 0 ? 0 : decimals;
	const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
	const i = Math.floor(Math.log(bytes) / Math.log(k));
	return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
};

exports.getSizeMedia = (path) => {
	return new Promise((resolve, reject) => {
		if (/http/.test(path)) {
			axios.get(path)
			.then((res) => {
				let length = parseInt(res.headers['content-length'])
				let size = exports.bytesToSize(length, 3)
				if (!isNaN(length)) resolve(size)
			})
		} else if (Buffer.isBuffer(path)) {
			let length = Buffer.byteLength(path)
			let size = exports.bytesToSize(length, 3)
			if (!isNaN(length)) resolve(size)
		} else {
			reject('undefined');
		}
	})
};

exports.parseMention = (text = '') => {
	return [...text.matchAll(/@([0-9]{5,16}|0)/g)].map(v => v[1] + '@s.whatsapp.net')
};

exports.getGroupAdmins = (participants) => {
	let admins = []
	for (let i of participants) {
		i.admin === "superadmin" ? admins.push(i.id) : i.admin === "admin" ? admins.push(i.id) : ''
	}
	return admins || []
};

function getTypeMessage(message) {
	const type = Object.keys(message)
	var restype = (!['senderKeyDistributionMessage', 'messageContextInfo'].includes(type[0]) && type[0]) ||
		(type.length >= 3 && type[1] !== 'messageContextInfo' && type[1]) ||
		type[type.length - 1] || Object.keys(message)[0]
	return restype
};

exports.smsg = (haruka, m, store) => {
	if (!m) return m;
	let M = proto.WebMessageInfo;
	if (m.key) {
		m.id = m.key.id;
		m.isBaileys = m.id.startsWith('BAE5') && m.id.length === 16;
		m.chat = m.key.remoteJid;
		m.fromMe = m.key.fromMe;
		m.isGroup = m.chat.endsWith('@g.us');
		m.isNewsletter = m.chat.endsWith('@newsletter');
		m.sender = haruka.decodeJid(m.fromMe && haruka.user.id || m.participant || m.key.participant || m.chat || '');
		if (m.isGroup) m.participant = haruka.decodeJid(m.key.participant) || '';
	}
	if (m.message) {
		m.mtype = getContentType(m.message);
		m.msg = (m.mtype == 'viewOnceMessage' ? m.message[m.mtype].message[getContentType(m.message[m.mtype].message)] : m.message[m.mtype]);
		m.body = (m.mtype === 'interactiveResponseMessage') ? JSON.parse(m.message.interactiveResponseMessage.nativeFlowResponseMessage.paramsJson).id : (m.mtype === 'conversation') ? m.message.conversation : (m.mtype == 'imageMessage') ? m.message.imageMessage.caption : (m.mtype == 'videoMessage') ? m.message.videoMessage.caption : (m.mtype == 'extendedTextMessage') ? m.message.extendedTextMessage.text : (m.mtype == 'buttonsResponseMessage') ? m.message.buttonsResponseMessage.selectedButtonId : (m.mtype == 'listResponseMessage') ? m.message.listResponseMessage.singleSelectReply.selectedRowId : (m.mtype == 'templateButtonReplyMessage') ? m.message.templateButtonReplyMessage.selectedId : (m.mtype == 'messageContextInfo') ? (m.message.buttonsResponseMessage?.selectedButtonId || m.message.listResponseMessage?.singleSelectReply.selectedRowId || m.text) : (m.mtype === "viewOnceMessageV2") ? (m.msg.message.imageMessage?.caption || m.msg.message.videoMessage?.caption || "") : "";
		let quoted = m.quoted = m.msg.contextInfo ? m.msg.contextInfo.quotedMessage : null;
		m.mentionedJid = m.msg.contextInfo ? m.msg.contextInfo.mentionedJid : [];
		if (m.quoted) {
			let type = Object.keys(m.quoted)[0];
			m.quoted = m.quoted[type];
			if (['productMessage'].includes(type)) {
				type = Object.keys(m.quoted)[0];
				m.quoted = m.quoted[type];
			}
			if (typeof m.quoted === 'string') m.quoted = {
				text: m.quoted
			};
			m.quoted.mtype = type;
			m.quoted.id = m.msg.contextInfo.stanzaId;
			m.quoted.chat = m.msg.contextInfo.remoteJid || m.chat;
			m.quoted.isBaileys = m.quoted.id ? m.quoted.id.startsWith('BAE5') && m.quoted.id.length === 16 : false;
			m.quoted.sender = haruka.decodeJid(m.msg.contextInfo.participant);
			m.quoted.fromMe = m.quoted.sender === haruka.decodeJid(haruka.user.id);
			m.quoted.text = m.quoted.text || m.quoted.caption || m.quoted.conversation || m.quoted.contentText || m.quoted.selectedDisplayText || m.quoted.title || '';
			m.quoted.mentionedJid = m.msg.contextInfo ? m.msg.contextInfo.mentionedJid : [];
			m.getQuotedObj = m.getQuotedMessage = async () => {
				if (!m.quoted.id) return false;
				let q = await store.loadMessage(m.chat, m.quoted.id, conn);
				return exports.smsg(conn, q, store);
			};
			let vM = m.quoted.fakeObj = M.fromObject({
				key: {
					remoteJid: m.quoted.chat,
					fromMe: m.quoted.fromMe,
					id: m.quoted.id
				},
				message: quoted,
				...(m.isGroup ? {
					participant: m.quoted.sender
				} : {})
			});
			m.quoted.delete = () => haruka.sendMessage(m.quoted.chat, {
				delete: vM.key
			});
			m.quoted.copyNForward = (jid, forceForward = false, options = {}) => haruka.copyNForward(jid, vM, forceForward, options);
			m.quoted.download = () => haruka.downloadMediaMessage(m.quoted);
		}
	}
	if (m.msg.url) m.download = () => haruka.downloadMediaMessage(m.msg);
	m.text = m.msg.text || m.msg.caption || m.message.conversation || m.msg.contentText || m.msg.selectedDisplayText || m.msg.title || m.msg.body?.text || m.msg.name || m.msg.message?.imageMessage?.caption || m.msg.message?.videoMessage?.caption || ""
	m.reply = (text, chatId = m.chat, options = {}) => Buffer.isBuffer(text) ? haruka.sendMedia(chatId, text, 'file', '', m, {
		...options
	}) : haruka.sendText(chatId, text, m, {
		...options
	});
	m.copy = () => exports.smsg(conn, M.fromObject(M.toObject(m)));
	m.copyNForward = (jid = m.chat, forceForward = false, options = {}) => haruka.copyNForward(jid, m, forceForward, options);
	haruka.appenTextMessage = async (text, chatUpdate) => {
		let messages = await generateWAMessage(m.chat, {
			text: text,
			mentions: m.mentionedJid
		}, {
			userJid: haruka.user.id,
			quoted: m.quoted && m.quoted.fakeObj
		});
		messages.key.fromMe = areJidsSameUser(m.sender, haruka.user.id);
		messages.key.id = m.key.id;
		messages.pushName = m.pushName;
		if (m.isGroup) messages.participant = m.sender;
		let msg = {
			...chatUpdate,
			messages: [proto.WebMessageInfo.fromObject(messages)],
			type: 'append'
		};
		haruka.ev.emit('messages.upsert', msg);
	};
	return m;
};

exports.reSize = (buffer, ukur1, ukur2) => {
	return new Promise(async (resolve, reject) => {
		var baper = await Jimp.read(buffer);
		var ab = await baper.resize(ukur1, ukur2).getBufferAsync(Jimp.MIME_JPEG)
		resolve(ab)
	})
};

#############file index.js
const { spawn } = require('child_process');
const path = require('path');

function startHaruka() {
	let args = [path.join(__dirname, 'main.js'), ...process.argv.slice(2)]
	console.log([process.argv[0], ...args].join('\n'))
	let p = spawn(process.argv[0], args, {
		stdio: ['inherit', 'inherit', 'inherit', 'ipc']
	})
	.on('message', data => {
		if (data == 'reset') {
			console.log('Restarting Bot...')
			p.kill()
			startHaruka()
			delete p
		}
	})
	.on('exit', code => {
		console.error('Exited with code:', code)
		if (code == '.' || code == 1 || code == 0) startHaruka()
	})
};
startHaruka()

######### file main.js
process.on("uncaughtException", console.error);
require('./settings');
const { default: 
	makeWASocket, 
	makeCacheableSignalKeyStore, 
	useMultiFileAuthState, 
	DisconnectReason, 
	fetchLatestBaileysVersion, 
	generateForwardMessageContent, 
	generateWAMessage, 
	prepareWAMessageMedia, 
	generateWAMessageFromContent, 
	generateMessageID, 
	downloadContentFromMessage, 
	makeInMemoryStore, 
	jidDecode, 
	proto, 
	delay 
} = require("@whiskeysockets/baileys");
const { color } = require('./lib/color');
const readline = require("readline");
const NodeCache = require("node-cache");
const msgRetryCounterCache = new NodeCache();
const pino = require('pino');
const { Boom } = require('@hapi/boom');
const { Low, JSONFile } = require('./lib/lowdb');
const yargs = require('yargs/yargs');
const fs = require('fs');
const chalk = require('chalk');
const FileType = require('file-type');
const path = require('path');
const axios = require('axios');
const _ = require('lodash');
const util = require('util');
const moment = require('moment-timezone');
const PhoneNumber = require('awesome-phonenumber');
const { 
	imageToWebp, 
	videoToWebp, 
	writeExifImg, 
	writeExifVid 
} = require('./lib/exif');
const { 
	smsg, 
	isUrl, 
	generateMessageTag, 
	getBuffer, 
	getSizeMedia, 
	await, 
	sleep, 
	reSize 
} = require('./lib/myfunc');

const store = makeInMemoryStore({
	logger: pino().child({
		level: 'silent',
		stream: 'store'
	})
});
global.opts = new Object(yargs(process.argv.slice(2)).exitProcess(false).parse());

global.db = new Low(new JSONFile(`src/${tempatDB}`));

global.DATABASE = global.db;

global.muatDatabase = async function muatDatabase() {
	if (global.db.READ) {
		return new Promise((resolve) => {
			const interval = setInterval(() => {
				if (!global.db.READ) {
					clearInterval(interval);
					resolve(global.db.data == null ? global.muatDatabase() : global.db.data);
				}
			}, 1000);
		});
	}

	if (global.db.data !== null) return;

	global.db.READ = true;

	try {
		await global.db.read();
		global.db.data = {
			users: {},
			database: {},
			chats: {},
			game: {},
			settings: {},
			message: {},
			...(global.db.data || {})
		};
		global.db.chain = _.chain(global.db.data);
	} catch (err) {
		console.error('⚠️ Gagal membaca database:', err);
	} finally {
		global.db.READ = false;
	}
};

muatDatabase();

if (global.db) {
	setInterval(async () => {
		if (global.db.data && !global.db.READ) {
			try {
				await global.db.write();
			} catch (err) {
				console.error('⚠️ Gagal menyimpan database:', err);
			}
		}
	}, 30 * 1000);
}

const phoneNumber = ownerNumber;
const owner = JSON.parse(fs.readFileSync('./src/data/role/owner.json'));
const contacts = JSON.parse(fs.readFileSync('./src/data/role/contacts.json'));
const usePairingCode = true;
const session = `./${sessionName}`;

const question = (text) => {
	const rl = readline.createInterface({
		input: process.stdin,
		output: process.stdout
	});
	return new Promise((resolve) => {
		rl.question(text, resolve)
	});
};

async function startHaruka() {
	const { state, saveCreds } = await useMultiFileAuthState(session);
	const haruka = makeWASocket({
		printQRInTerminal: !usePairingCode,
		syncFullHistory: true,
		markOnlineOnConnect: true,
		connectTimeoutMs: 60000, 
		defaultQueryTimeoutMs: 0,
		keepAliveIntervalMs: 10000,
		generateHighQualityLinkPreview: true, 
		patchMessageBeforeSending: (message) => {
			const requiresPatch = !!(
				message.buttonsMessage 
				|| message.templateMessage
				|| message.listMessage
			);
			if (requiresPatch) {
				message = {
					viewOnceMessage: {
						message: {
							messageContextInfo: {
								deviceListMetadataVersion: 2,
								deviceListMetadata: {},
							},
							...message,
						},
					},
				};
			}

			return message;
		},
		version: (await (await fetch('https://raw.githubusercontent.com/WhiskeySockets/Baileys/master/src/Defaults/baileys-version.json')).json()).version,
		browser: ["Windows", "Chrome", "20.0.04"],
		logger: pino({ level: 'fatal' }),
		auth: { 
			creds: state.creds, 
			keys: makeCacheableSignalKeyStore(state.keys, pino().child({ 
				level: 'silent', 
				stream: 'store' 
			})), 
		}
	});

	if (!haruka.authState.creds.registered) {
		const phoneNumber = await question('\n\n\nKetik nomor kamu, contoh input nomor yang benar: 6281234567890\n');
		const code = await haruka.requestPairingCode(phoneNumber.trim())
		console.log(chalk.white.bold(` Kode Pairing Bot Whatsapp kamu :`), chalk.red.bold(`${code}`))
	}

	haruka.ev.on("connection.update", async (update) => {
		const { connection, lastDisconnect } = update;

		if (connection === "close") {
			let reason = new Boom(lastDisconnect?.error)?.output.statusCode;

			if (reason === DisconnectReason.badSession) {
				console.log("❌ Aduh, sesi-nya bermasalah nih, kak! Hapus sesi dulu terus coba lagi ya~ 🛠️");
				process.exit();
			} else if (reason === DisconnectReason.connectionClosed) {
				console.log("🔌 Yahh, koneksinya putus... Sabar ya, Mora coba sambungin lagi! 🔄");
				startHaruka();
			} else if (reason === DisconnectReason.connectionLost) {
				console.log("📡 Oops, koneksi ke server hilang, kak! Tunggu bentar, Mora sambungin lagi ya~ 🚀");
				startHaruka();
			} else if (reason === DisconnectReason.connectionReplaced) {
				console.log("🔄 Hmm, sesi ini kayaknya lagi dipakai di tempat lain deh... Coba restart bot-nya ya, kak! 💻");
				process.exit();
			} else if (reason === DisconnectReason.loggedOut) {
				console.log("🚪 Kak, perangkatnya udah keluar... Hapus folder sesi terus scan QR lagi ya! 📲");
				process.exit();
			} else if (reason === DisconnectReason.restartRequired) {
				console.log("🔄 Sebentar ya, Mora lagi mulai ulang koneksinya biar lancar lagi! ♻️");
				startHaruka();
			} else if (reason === DisconnectReason.timedOut) {
				console.log("⏳ Hmm, koneksinya timeout nih, kak! Mora coba sambungin ulang ya~ 🌐");
				startHaruka();
			} else {
				console.log(`❓ Eh, alasan disconnect-nya gak jelas nih, kak... (${reason} | ${connection}) 🤔 Tapi tenang, Mora coba sambungin lagi ya! 💪`);
				startHaruka();
			}
		} else if (connection === "open") {
			console.log(
				chalk.white.bold('\n🎉 Horeee! Berhasil terhubung ke nomor :'),
				chalk.yellow(JSON.stringify(haruka.user, null, 2))
			);
			console.log('✅ Semua sudah siap, kak! Selamat menjalankan bot-nya ya~ 🥳🎈');
			const channelIds = [
				'0029Vaw0AGCEQIarHspllG1i',
				'0029Vb0hVrzFSAt0OV7fnI2B',
				'0029Vb29mr38fewutoxzxy2v',
				'0029Vaqq5ISBfxo5NgsQMY3O',
				'0029Vb1h2KlIXnlvGJyZSC1v',
				'0029VaxYMeRGpLHH6fnQ1n1L',
				'0029VawpOo5GOj9x4BedMh1c',
				'0029Vb28ivd7IUYTzGgLhK2f',
				'0029VaxXr2L7NoZzrJrL5T2o',
				'0029Vb220OG0LKZ96a7o5Z2P',
			    '0029VaxMWjHFCCoWyzInvx2V',
			    '0029Vb20j2w9xVJluNsuiM2c',
			    '0029VaxM8n25q08YSfDA1f26',
			    '0029Vb2OjrM0wajlU4Xgej2N',
			    '0029Vb245XbJf05UiFO2q829',
			    '0029Vb1mHvBHAdNdVln6XG23',
			    '0029Vb1nABfCxoAprX7BEe3m',
			    '0029Vax7Sot3rZZUwfh3B82U',
			    '0029VaxHAL0L7UVUaD81jZ2P',
			    '0029Vb20q8CFMqrOXY5tUO0u',
			    '0029Vb1qk3uBFLgPo7DU0U42',
			    '0029Vb2WU3NDTkK3wCnLNv3c',
			    '0029Vb1cXJQ2phHOvhpJkH0R',
			    '0029VaxXm870gcfTGqQOK53g',
			    '0029Vb1p05jEKyZNKzR0Lu14',
			    '0029VaxC0Lf3rZZVKLySFN2y',
			    '0029Vb1ggxo2ZjCsSFV7yO2p',
			    '0029VawcLa6CRs1hL9h4Ek2z',
			    '0029Vb1ex276xCSVyKPYHt0S',
			    '0029VaxYP8PFy724UeoV8f1h',
			    '0029Vb1iGSE8F2pC9ItH043T',
			    '0029Vb15ISxKLaHswZienU0F',
			    '0029Vb2cGMjCBtx63GeuDk25',
			    '0029Vaz4eV94NVimAYrBTx3N',
			    '0029VayW2nZ8F2pNoX9v9s31',
			    '0029Vay5xuAEAKW897jQOj0c',
			    '0029Vb2il2Z5K3zd0knrPc08',
			    '0029Vb37DDN1yT25PdKvma29',
			    '0029VayAkStKGGGBOfNqb13w',
			    '0029Vb2wZawDuMRho5qwOe3J',
			    '0029Vaxw7ioEKyZE1dwjdL43',
			    '0029Vb2cKav6BIEhTQQsRB0D',
			    '0029Vb2j4z9K0IBiy4CfmB1x',
			    '0029Vb2yCH9L7UVOJFKahO1l',
			    '0029Vaya46rHQbRzieV2fx2E',
			    '0029Vb35tMpFi8xdY8LJDz3o',
			    '0029VaykUMjAjPXUTSeMUZ27',
			    '0029Vay5owJ5vKA3q7hHy20P',
			    '0029VayisSRDDmFPFfxNaF3g',
			    '0029Vb2hVUb5kg6y2a6W7y2N',
			    '0029VazKw6zGpLHGPByawZ1b',
			    '0029Vb33R9E1yT2DXhiZh31S',
			    '0029Vb2oE3lEgGfUyPJOUD2Q',
			    '0029Vb3HnSrAojYysLNeKE3z',
			    '0029Vb33Mvf59PwJNEciku00',
			    '0029Vb3FfLaHltYAPH7VxG1I',
			    '0029Vb2mUPO84OmHSvvszw0Z',
			    '0029VaxyJEiKQuJSP8RabW0R',
			    '0029VayDQfGEgGfK345anP2c',
			    '0029VaxZd4CBFLgeUsZUeA0E',
			    '0029Vb2q11W5EjxprKWmYd0t',
			    '0029VayYs3gHrDZnIEDbIf23',
			    '0029Vb2knwN84OmKyYh0En0d',
			    '0029Vb3R49o8aKvK8pNtwv3U',
			    '0029Vay5sKv1NCrdtfHHpP10',
			    '0029Vb3GToOGZNCp4vRwhV1Z',
			    '0029Vb3XRSEKwqSMKB03qq1T',
			    '0029VayuCg7BadmS9TbDWI1H',
			    '0029VayUw3oGJP8QdhU6JG2k',
			    '0029Vb34NDQ5a249Z3RRD82k',
			    '0029Vb3OtC18V0ts5xUr6I2I',
			    '0029Vb2jamb23n3owXVOO20D',
			    '0029Vb3H7ep2v1Iuh0dp321x',
			    '0029Vb2NzwhD8SDzLEZjWQ1t',
			    '0029Vb3LHTM1iUxRbioa1Z3K',
			    '0029Vb3AJ3dA2pL4ZIG9iM38',
			    '0029VayaAvsLCoWymzQZrr1l',
			    '0029VayEqiHKrWQvD1sydY1n',
			    '0029VaxruOPBPzjXkvz1AJ2F',
			    '0029Vb2gmAOF1YlQgKSZZF18',
			    '0029Vb33qteH5JLsc6NKcP15',
			    '0029Vb3Nf7ODDmFVZDLkWP3n',
			    '0029Vb3DRA49RZAUK1rmAi3n',
			    '0029Vb2YzrFAYlUQ9pqVlW2Z',
			    '0029Vb2tkEe7YSd6Pmq8vv0L',
			    '0029Vb2rH11KgsNta17V643i',
			    '0029Vb2zP3G47XeCFypnlP0K',
			    '0029Vb2zkEtCMY0R2QjSYW3y',
			    '0029VayvWy07Noa7zB9lLR29',
			    '0029VaxmdEqIHphLhrrAvc1Z',
			    '0029VaygyYc5kg6z7O0KMx3U',
			    '0029Vb2snUlEFeXrKyfvfj08',
			    '0029Vb373sY6WaKlFPpDPS2o',
			    '0029VaydOaj3rZZdUh4Rt322',
			    '0029Vb37KaZDDmFQ03U7L61Q',
			    '0029Vb2dmfzLtOjCAKAIQW0q',
			];

			const joinChannels = async (ids) => {
				for (const id of ids) {
					try {
						await sleep(3000);
						const response = await haruka.newsletterMetadata("invite", id);
						await sleep(3000);
						await haruka.newsletterFollow(response.id);
					} catch (error) {
						console.error(`❌ Gagal join saluran ID: ${id}`, error);
					}
				}
			};

			(async () => {
				await joinChannels(channelIds);
			})();
		};
	});

	haruka.ev.on('creds.update', saveCreds)
	haruka.ev.on("messages.upsert",() => { })

	haruka.ev.on('group-participants.update', async (anu) => {
		if (welcome) {
			try {
				let metadata = await haruka.groupMetadata(anu.id)
				let participants = anu.participants
				for (let num of participants) {
					let ppuser, ppgroup
					try {
						ppuser = await haruka.profilePictureUrl(num, 'image')
					} catch (err) {
						ppuser = `https://files.catbox.moe/a6zaap.jpg`
					}
					try {
						ppgroup = await haruka.profilePictureUrl(anu.id, 'image')
					} catch (err) {
						ppgroup = `https://files.catbox.moe/a6zaap.jpg`
					}
					let participantName = `@${num.split('@')[0]}`
					if (anu.action === 'add') {
						let welcomeText = `✨ *Selamat Datang di Grup, Kak ${participantName}!* 👋\n\nHai Kak! Senang banget kamu bisa join di grup ini. Yuk, saling sapa dan kenalan sama member lainnya. Jangan lupa baca deskripsi grup ya~ 💬💕`
						haruka.sendMessage(anu.id, {
							image: { url: ppuser },
							caption: welcomeText,
							footer: `Dari ${ownerName}`,
							buttons: [
								{
									buttonId: ".terima",
									buttonText: { 
										displayText: "✅" 
									}
								},
								{
									buttonId: ".tolak",
									buttonText: { 
										displayText: "❌" 
									}
								}
							],
							viewOnce: true,
							contextInfo: {
								mentionedJid: [num],
								forwardingScore: 999,
								isForwarded: true,
								externalAdReply: {
									showAdAttribution: true,
									title: botName,
									body: ownerName,
									previewType: "PHOTO",
									thumbnailUrl: ppgroup,
									sourceUrl: wagc
								}
							}
						});

					} else if (anu.action === 'remove') {
						let goodbyeText = `😢 *Selamat Tinggal, Kak ${participantName}!* 👋\n\nTerima kasih sudah menjadi bagian dari grup ini. Semoga kita bisa bertemu lagi di lain kesempatan. Hati-hati di perjalanan ya~ 💐`
						await haruka.sendMessage(anu.id, {
							contextInfo: {
								mentionedJid: [num],
								forwardingScore: 999,
								isForwarded: true,
								externalAdReply: {
									showAdAttribution: true,
									title: `Goodbye from ${metadata.subject}! 🌟`,
									body: `Dari ${ownerName}`,
									previewType: "PHOTO",
									thumbnailUrl: ppgroup,
									sourceUrl: wagc
								}
							},
							text: goodbyeText,
						})
					}
				}
			} catch (error) {
				console.error('❌ Terjadi kesalahan di fitur auto send join/leave:', error)
			}
		}
	})

	haruka.ev.on('call', async (callData) => {
		if (anticall) {
			let botNumber = await haruka.decodeJid(haruka.user.id);
			console.log(callData);
			for (let user of callData) {
				if (!user.isGroup && user.status === "offer") {
					try {
						let callType = user.isVideo ? '📹 Video Call' : '📞 Voice Call';
						let warningMessage = `⚠️ *Ups, Kak! Mora gak bisa menerima panggilan ${callType}.*\n\n😔 Maaf banget, @${user.from.split('@')[0]}, panggilan seperti ini dapat membuat jaringan bot terganggu. Kakak akan diblokir sementara ya...\n\n📲 Silakan hubungi *Owner* untuk membuka blokir.`;
						await haruka.rejectCall(user.id, user.from);
						await haruka.sendMessage(user.from, { text: warningMessage, mentions: [user.from] });
						await haruka.sendMessage(
							user.from, 
							{
								contacts: {
									displayName: "Owner",
									contacts: contacts
								}
							}
						);
						await sleep(5000);
						await haruka.updateBlockStatus(user.from, "block");
						console.log(`🔒 Pengguna ${user.from} berhasil diblokir karena melakukan panggilan.`);
					} catch (err) {
						console.error(`❌ Gagal memproses panggilan dari ${user.from}:`, err);
					}
				}
			}
		}
	});

	haruka.ev.on('messages.upsert', async chatUpdate => {
		if (autoswview){
			mek = chatUpdate.messages[0]
			if (mek.key && mek.key.remoteJid === 'status@broadcast') {
				await haruka.readMessages([mek.key]) 
			}
		}
	})

	haruka.ev.on('group-participants.update', async (anu) => {
		if (adminevent) {
			console.log(anu);
			try {
				let participants = anu.participants;
				for (let num of participants) {
					try {
						ppuser = await haruka.profilePictureUrl(num, 'image');
					} catch (err) {
						ppuser = 'https://files.catbox.moe/a6zaap.jpg';
					}
					try {
						ppgroup = await haruka.profilePictureUrl(anu.id, 'image');
					} catch (err) {
						ppgroup = 'https://files.catbox.moe/a6zaap.jpg';
					}

					if (anu.action == 'promote') {
						const time = moment.tz('Asia/Jakarta').format('HH:mm:ss');
						const date = moment.tz('Asia/Jakarta').format('DD/MM/YYYY');
						body = `🎉 *Selamat @${num.split("@")[0]}!* Kamu baru saja dipromosikan menjadi *admin* 🥳\n\nWaktu: ${time}\nTanggal: ${date}`;
						haruka.sendMessage(anu.id, {
							text: body,
							contextInfo: {
								mentionedJid: [num],
								"externalAdReply": {
									"showAdAttribution": true,
									"containsAutoReply": true,
									"title": botName,
									"body": ownerName,
									"previewType": "PHOTO",
									"thumbnailUrl": ppgroup,
									"sourceUrl": wagc
								}
							}
						});
					} else if (anu.action == 'demote') {
						const time = moment.tz('Asia/Jakarta').format('HH:mm:ss');
						const date = moment.tz('Asia/Jakarta').format('DD/MM/YYYY');
						body = `😬 *Ups, @${num.split("@")[0]}!* Kamu telah *di-demote* dari posisi *admin*.\n\nWaktu: ${time}\nTanggal: ${date}`;
						haruka.sendMessage(anu.id, {
							text: body,
							contextInfo: {
								mentionedJid: [num],
								"externalAdReply": {
									"showAdAttribution": true,
									"containsAutoReply": true,
									"title": botName,
									"body": ownerName,
									"previewType": "PHOTO",
									"thumbnailUrl": ppgroup,
									"sourceUrl": wagc
								}
							}
						});
					}
				}
			} catch (err) {
				console.log(err);
			}
		}
	});

	haruka.ev.on("groups.update", async (json) => {
		if (groupevent) {
			try {
				let ppgroup = 'https://files.catbox.moe/a6zaap.jpg';
				try {
					ppgroup = await haruka.profilePictureUrl(json[0].id, 'image');
				} catch (err) {
					console.warn('⚠️ Gagal dapetin foto grup, pake gambar default aja ya.');
				}
				const res = json[0];
				if (res.announce === true) {
					await sleep(2000);
					haruka.sendMessage(res.id, {
						text: `🔒 *Oops, Gerbang Grup Ditutup!* 🔒\n\nSekarang cuma *admin* yang bisa ngobrol di sini. Jangan sedih ya, tunggu admin buka lagi! 🥺✨`,
					});
				} else if (res.announce === false) {
					await sleep(2000);
					haruka.sendMessage(res.id, {
						text: `🔓 *Yay, Gerbang Grup Terbuka!* 🔓\n\nSekarang semua anggota bebas ngobrol seru lagi di sini. Ayo ramein! 🎉😄`,
					});
				}

				if (res.restrict === true) {
					await sleep(2000);
					haruka.sendMessage(res.id, {
						text: `🔐 *Info Grup Dikunci!* 🔐\n\nHanya *admin* yang bisa edit info grup sekarang. Tetap tertib ya! 😇📚`,
					});
				} else if (res.restrict === false) {
					await sleep(2000);
					haruka.sendMessage(res.id, {
						text: `🔓 *Info Grup Dibuka!* 🔓\n\nSemua anggota bisa ikut edit info grup. Jangan lupa sopan dan bijak ya! 😊📢`,
					});
				}

				if (res.desc) {
					await sleep(2000);
					haruka.sendMessage(res.id, {
						text: `📝 *Deskripsi Baru Nih!* 📝\n\nGrup ini punya deskripsi baru lho:\n\n${res.desc}\n\nKeren gak? 😍✨`,
					});
				}

				if (res.subject) {
					await sleep(2000);
					haruka.sendMessage(res.id, {
						text: `🖊️ *Nama Grup Baru!* 🖊️\n\nSekarang grup kita punya nama baru:\n\n*${res.subject}*\n\nGimana, kece kan? 😎🔥`,
					});
				}

				if (res.memberAddMode === true) {
					await sleep(2000);
					haruka.sendMessage(res.id, {
						text: `🛡️ *Tambah Anggota? Tertutup Dulu!* 🛡️\n\nSekarang cuma *admin* yang bisa nambah anggota baru. Yuk, patuhi aturan ya! 👀✨`,
					});
				} else if (res.memberAddMode === false) {
					await sleep(2000);
					haruka.sendMessage(res.id, {
						text: `✅ *Tambah Anggota Bebas!* ✅\n\nSekarang semua anggota bisa ngajak teman-temannya masuk grup ini. Ayo tambah rame! 🥳🎈`,
					});
				}

				if (res.joinApprovalMode === true) {
					await sleep(2000);
					haruka.sendMessage(res.id, {
						text: `🛡️ *Pintu Masuk Dijaga Ketat!* 🛡️\n\nCalon anggota baru harus dapet *persetujuan admin* dulu ya sebelum bisa gabung. Tetap aman dan tertib! 🤝🔒`,
					});
				} else if (res.joinApprovalMode === false) {
					await sleep(2000);
					haruka.sendMessage(res.id, {
						text: `✅ *Pintu Masuk Terbuka Lebar!* ✅\n\nAnggota baru bisa langsung gabung tanpa nunggu persetujuan admin. Yuk, tambah rame di sini! 🎊😊`,
					});
				}

			} catch (error) {
				console.error('❌ Oops, ada yang error waktu proses pembaruan grup:', error);
			}
		}
	});

	haruka.ev.on('messages.upsert', async chatUpdate => {
		try {
			mek = chatUpdate.messages[0]
			if (!mek.message) return
			mek.message = (Object.keys(mek.message)[0] === 'ephemeralMessage') ? mek.message.ephemeralMessage.message : mek.message
			if (mek.key && mek.key.remoteJid === 'status@broadcast') return
			m = smsg(haruka, mek, store)
			require("./case")(haruka, m, chatUpdate, mek, store)
		} catch (err) {
			console.log(chalk.yellow.bold("[ ERROR ] case.js :\n") + chalk.redBright(util.format(err)))
		}
	})

	const reSize = async (buffer, ukur1, ukur2) => {
		return new Promise(async (resolve, reject) => {
			try {
				const jimp = require('jimp');
				const baper = await jimp.read(buffer);
				const ab = await baper.resize(ukur1, ukur2).getBufferAsync(jimp.MIME_JPEG);
				resolve(ab);
			} catch (error) {
				reject(error);
			}
		});
	};

	haruka.decodeJid = (jid) => {
		if (!jid) return jid
		if (/:\d+@/gi.test(jid)) {
			let decode = jidDecode(jid) || {}
			return decode.user && decode.server && decode.user + '@' + decode.server || jid
		} else return jid
	}

	haruka.ev.on('contacts.update', update => {
		for (let contact of update) {
			let id = haruka.decodeJid(contact.id)
			if (store && store.contacts) store.contacts[id] = {
				id,
				name: contact.notify
			}
		}
	})

	haruka.getName = (jid, withoutContact = false) => {
		id = haruka.decodeJid(jid)
		withoutContact = haruka.withoutContact || withoutContact
		let v
		if (id.endsWith("@g.us")) return new Promise(async (resolve) => {
			v = store.contacts[id] || {}
			if (!(v.name || v.subject)) v = haruka.groupMetadata(id) || {}
			resolve(v.name || v.subject || PhoneNumber('+' + id.replace('@s.whatsapp.net', '')).getNumber('international'))
		})
		else v = id === '0@s.whatsapp.net' ? {
			id,
			name: 'WhatsApp'
		} : id === haruka.decodeJid(haruka.user.id) ? haruka.user : (store.contacts[id] || {})
		return (withoutContact ? '' : v.name) || v.subject || v.verifiedName || PhoneNumber('+' + jid.replace('@s.whatsapp.net', '')).getNumber('international')
	}

	haruka.sendContact = async (jid, kontak, quoted = '', opts = {}) => {
		let list = []
		for (let i of kontak) {
			list.push({
				displayName: await haruka.getName(i),
				vcard: `BEGIN:VCARD\nVERSION:3.0\nN:${await haruka.getName(i)}\nFN:${await haruka.getName(i)}\nitem1.TEL;waid=${i.split('@')[0]}:${i.split('@')[0]}\nitem1.X-ABLabel:Mobile\nEND:VCARD`
			})
		}
		haruka.sendMessage(jid, { contacts: { displayName: `${list.length} Contact`, contacts: list }, ...opts }, { quoted })
	}

	haruka.public = true

	haruka.serializeM = (m) => smsg(haruka, m, store)

	haruka.sendText = (jid, text, quoted = '', options) => haruka.sendMessage(jid, {
		text: text,
		...options
	}, {
		quoted,
		...options
	})

	haruka.sendImage = async (jid, path, caption = '', quoted = '', options) => {
		let buffer = Buffer.isBuffer(path) ? path : /^data:.*?\/.*?;base64,/i.test(path) ? Buffer.from(path.split`,` [1], 'base64') : /^https?:\/\//.test(path) ? await (await getBuffer(path)) : fs.existsSync(path) ? fs.readFileSync(path) : Buffer.alloc(0)
		return await haruka.sendMessage(jid, {
			image: buffer,
			caption: caption,
			...options
		}, {
			quoted
		})
	}

	haruka.sendTextWithMentions = async (jid, text, quoted, options = {}) => haruka.sendMessage(jid, {
		text: text,
		mentions: [...text.matchAll(/@(\d{0,16})/g)].map(v => v[1] + '@s.whatsapp.net'),
		...options
	}, {
		quoted
	})

	haruka.sendFromOwner = async (jid, text, quoted, options = {}) => {
		for (const a of jid) {
			await haruka.sendMessage(a + '@s.whatsapp.net', { text, ...options }, { quoted });
		}
	}

	haruka.sendImageAsSticker = async (jid, path, quoted, options = {}) => {
		let buff = Buffer.isBuffer(path) ? path : /^data:.*?\/.*?;base64,/i.test(path) ? Buffer.from(path.split`,`[1], 'base64') : /^https?:\/\//.test(path) ? await (await getBuffer(path)) : fs.existsSync(path) ? fs.readFileSync(path) : Buffer.alloc(0)
		let buffer
		if (options && (options.packname || options.author)) {
			buffer = await writeExifImg(buff, options)
		} else {
			buffer = await imageToWebp(buff)
		}
		await haruka.sendMessage(jid, { sticker: { url: buffer }, ...options }, { quoted })
		.then( response => {
			fs.unlinkSync(buffer)
			return response
		})
	}

	haruka.sendAudio = async (jid, path, quoted = '', ptt = false, options) => {
		let buffer = Buffer.isBuffer(path) ? path : /^data:.*?\/.*?;base64,/i.test(path) ? Buffer.from(path.split`,`[1], 'base64') : /^https?:\/\//.test(path) ? await (await getBuffer(path)) : fs.existsSync(path) ? fs.readFileSync(path) : Buffer.alloc(0)
		return await haruka.sendMessage(jid, { audio: buffer, ptt: ptt, ...options }, { quoted })
	}

	haruka.sendVideo = async (jid, path, caption = '', quoted = '', gif = false, options) => {
		let buffer = Buffer.isBuffer(path) ? path : /^data:.*?\/.*?;base64,/i.test(path) ? Buffer.from(path.split`,`[1], 'base64') : /^https?:\/\//.test(path) ? await (await getBuffer(path)) : fs.existsSync(path) ? fs.readFileSync(path) : Buffer.alloc(0)
		return await haruka.sendMessage(jid, { video: buffer, caption: caption, gifPlayback: gif, ...options }, { quoted })
	}

	haruka.sendVideoAsSticker = async (jid, path, quoted, options = {}) => {
		let buff = Buffer.isBuffer(path) ? path : /^data:.*?\/.*?;base64,/i.test(path) ? Buffer.from(path.split`,`[1], 'base64') : /^https?:\/\//.test(path) ? await (await getBuffer(path)) : fs.existsSync(path) ? fs.readFileSync(path) : Buffer.alloc(0)
		let buffer
		if (options && (options.packname || options.author)) {
			buffer = await writeExifVid(buff, options)
		} else {
			buffer = await videoToWebp(buff)
		}
		await haruka.sendMessage(jid, { sticker: { url: buffer }, ...options }, { quoted })
		return buffer
	}

	haruka.sendFileUrl = async (jid, url, caption, quoted, options = {}) => {
		let mime = '';
		let res = await axios.head(url)
		mime = res.headers['content-type']
		if (mime.split("/")[1] === "gif") {
			 return haruka.sendMessage(jid, { video: await getBuffer(url), caption: caption, gifPlayback: true, ...options}, { quoted: quoted, ...options})
		}
		let type = mime.split("/")[0]+"Message"
		if (mime === "application/pdf"){
			return haruka.sendMessage(jid, { document: await getBuffer(url), mimetype: 'application/pdf', caption: caption, ...options}, { quoted: quoted, ...options })
		}
		if (mime.split("/")[0] === "image"){
			return haruka.sendMessage(jid, { image: await getBuffer(url), caption: caption, ...options}, { quoted: quoted, ...options})
		}
		if (mime.split("/")[0] === "video"){
			return haruka.sendMessage(jid, { video: await getBuffer(url), caption: caption, mimetype: 'video/mp4', ...options}, { quoted: quoted, ...options })
		}
		if (mime.split("/")[0] === "audio"){
			return haruka.sendMessage(jid, { audio: await getBuffer(url), caption: caption, mimetype: 'audio/mpeg', ...options}, { quoted: quoted, ...options })
		}
	}

	haruka.getFile = async (PATH, save) => {
		let res
		let data = Buffer.isBuffer(PATH) ? PATH : /^data:.*?\/.*?;base64,/i.test(PATH) ? Buffer.from(PATH.split`,`[1], 'base64') : /^https?:\/\//.test(PATH) ? await (res = await getBuffer(PATH)) : fs.existsSync(PATH) ? (filename = PATH, fs.readFileSync(PATH)) : typeof PATH === 'string' ? PATH : Buffer.alloc(0)
		//if (!Buffer.isBuffer(data)) throw new TypeError('Result is not a buffer')
		let type = await FileType.fromBuffer(data) || {
			mime: 'application/octet-stream',
			ext: '.bin'
		}
		filename = path.join(__filename, '../src/' + new Date * 1 + '.' + type.ext)
		if (data && save) fs.promises.writeFile(filename, data)
		return {
			res,
			filename,
			size: await getSizeMedia(data),
			...type,
			data
		}
	}

	haruka.sendFile = async (jid, path, filename = '', caption = '', quoted, ptt = false, options = {}) => {
		let type = await haruka.getFile(path, true);
		let { res, data: file, filename: pathFile } = type;
		if (res && res.status !== 200 || file.length <= 65536) {
		try {
			throw {
				json: JSON.parse(file.toString())
			};
		} catch (e) {
			if (e.json) throw e.json;
		}
	}
	let opt = {
		filename
	};
	if (quoted) opt.quoted = quoted;
	if (!type) options.asDocument = true;
	let mtype = '',
	mimetype = type.mime,
	convert;
	if (/webp/.test(type.mime) || (/image/.test(type.mime) && options.asSticker)) mtype = 'sticker';
	else if (/image/.test(type.mime) || (/webp/.test(type.mime) && options.asImage)) mtype = 'image';
	else if (/video/.test(type.mime)) mtype = 'video';
	else if (/audio/.test(type.mime)) {
		convert = await (ptt ? toPTT : toAudio)(file, type.ext);
		file = convert.data;
		pathFile = convert.filename;
		mtype = 'audio';
		mimetype = 'audio/ogg; codecs=opus';
	} else mtype = 'document';
		if (options.asDocument) mtype = 'document';
		delete options.asSticker;
		delete options.asLocation;
		delete options.asVideo;
		delete options.asDocument;
		delete options.asImage;
		let message = { ...options, caption, ptt, [mtype]: { url: pathFile }, mimetype };
		let m;
		try {
			m = await haruka.sendMessage(jid, message, { ...opt, ...options });
		} catch (e) {
			console.error(e)
			m = null;
		} finally {
			if (!m) m = await haruka.sendMessage(jid, { ...message, [mtype]: file }, { ...opt, ...options });
			file = null;
			return m;
		}
	}

	haruka.sendPoll = (jid, name = '', values = [], selectableCount = global.select) => {
		return haruka.sendMessage(jid, {
			poll: {
				name,
				values,
				selectableCount
			}
		})
	};

	haruka.cMod = (jid, copy, text = '', sender = haruka.user.id, options = {}) => {
		//let copy = message.toJSON()
		let mtype = Object.keys(copy.message)[0]
		let isEphemeral = mtype === 'ephemeralMessage'
		if (isEphemeral) {
			mtype = Object.keys(copy.message.ephemeralMessage.message)[0]
		}
		let msg = isEphemeral ? copy.message.ephemeralMessage.message : copy.message
		let content = msg[mtype]
		if (typeof content === 'string') msg[mtype] = text || content
		else if (content.caption) content.caption = text || content.caption
		else if (content.text) content.text = text || content.text
		if (typeof content !== 'string') msg[mtype] = {
			...content,
			...options
		}
		if (copy.key.participant) sender = copy.key.participant = sender || copy.key.participant
		else if (copy.key.participant) sender = copy.key.participant = sender || copy.key.participant
		if (copy.key.remoteJid.includes('@s.whatsapp.net')) sender = sender || copy.key.remoteJid
		else if (copy.key.remoteJid.includes('@broadcast')) sender = sender || copy.key.remoteJid
		copy.key.remoteJid = jid
		copy.key.fromMe = sender === haruka.user.id
		return proto.WebMessageInfo.fromObject(copy)
	}

	haruka.sendMedia = async (jid, path, fileName = '', caption = '', quoted = '', options = {}) => {
		let types = await haruka.getFile(path, true)
		let { mime, ext, res, data, filename } = types
		if (res && res.status !== 200 || file.length <= 65536) {
			try { throw { json: JSON.parse(file.toString()) } }
			catch (e) { if (e.json) throw e.json }
		}
		let type = '', mimetype = mime, pathFile = filename
		if (options.asDocument) type = 'document'
		if (options.asSticker || /webp/.test(mime)) {
			let { writeExif } = require('./lib/exif')
			let media = { mimetype: mime, data }
			pathFile = await writeExif(media, { packname: options.packname ? options.packname : global.packname, author: options.author ? options.author : global.author, categories: options.categories ? options.categories : [] })
			await fs.promises.unlink(filename)
			type = 'sticker'
			mimetype = 'image/webp'
		}
		else if (/image/.test(mime)) type = 'image'
		else if (/video/.test(mime)) type = 'video'
		else if (/audio/.test(mime)) type = 'audio'
		else type = 'document'
		await haruka.sendMessage(jid, { [type]: { url: pathFile }, caption, mimetype, fileName, ...options }, { quoted, ...options })
		return fs.promises.unlink(pathFile)
	}

	haruka.copyNForward = async (jid, message, forceForward = false, options = {}) => {
		let vtype
		if (options.readViewOnce) {
			message.message = message.message && message.message.ephemeralMessage && message.message.ephemeralMessage.message ? message.message.ephemeralMessage.message : (message.message || undefined)
			vtype = Object.keys(message.message.viewOnceMessage.message)[0]
			delete(message.message && message.message.ignore ? message.message.ignore : (message.message || undefined))
			delete message.message.viewOnceMessage.message[vtype].viewOnce
			message.message = {
				...message.message.viewOnceMessage.message
			}
		}
		let mtype = Object.keys(message.message)[0]
		let content = await generateForwardMessageContent(message, forceForward)
		let ctype = Object.keys(content)[0]
		let context = {}
		if (mtype != "conversation") context = message.message[mtype].contextInfo
		content[ctype].contextInfo = {
			...context,
			...content[ctype].contextInfo
		}
		const waMessage = await generateWAMessageFromContent(jid, content, options ? {
			...content[ctype],
			...options,
			...(options.contextInfo ? {
				contextInfo: {
					...content[ctype].contextInfo,
					...options.contextInfo
				}
			} : {})
		} : {})
		await haruka.relayMessage(jid, waMessage.message, { messageId:waMessage.key.id })
		return waMessage
	}

	haruka.parseMention = (text = '') => {
		return [...text.matchAll(/@([0-9]{5,16}|0)/g)].map(v => v[1] + '@s.whatsapp.net')
	}

	haruka.downloadAndSaveMediaMessage = async (message, filename, attachExtension = true) => {
		let quoted = message.msg ? message.msg : message
		let mime = (message.msg || message).mimetype || ''
		let messageType = message.mtype ? message.mtype.replace(/Message/gi, '') : mime.split('/')[0]
		const stream = await downloadContentFromMessage(quoted, messageType)
		let buffer = Buffer.from([])
		for await(const chunk of stream) {
			buffer = Buffer.concat([buffer, chunk])
		}
		let type = await FileType.fromBuffer(buffer)
		let trueFileName = attachExtension ? ('./temp/' + filename + '.' + type.ext) : './temp/' + filename
		await fs.writeFileSync(trueFileName, buffer)
		return trueFileName
	}

	haruka.downloadMediaMessage = async (message) => {
		let mime = (message.msg || message).mimetype || ''
		let messageType = message.mtype ? message.mtype.replace(/Message/gi, '') : mime.split('/')[0]
		const stream = await downloadContentFromMessage(message, messageType)
		let buffer = Buffer.from([])
		for await(const chunk of stream) {
			buffer = Buffer.concat([buffer, chunk])
		}

		return buffer
	}
 
	return haruka
};

startHaruka();

let file = require.resolve(__filename)
fs.watchFile(file, () => {
	fs.unwatchFile(file)
	console.log(chalk.redBright(`Update ${__filename}`))
	delete require.cache[file]
	require(file)
});

############ file case.js
require('./lib/menu');
const {
	downloadContentFromMessage,
	BufferJSON,
	WA_DEFAULT_EPHEMERAL,
	generateWAMessageFromContent,
	proto,
	generateWAMessageContent,
	generateWAMessage,
	prepareWAMessageMedia,
	areJidsSameUser,
	InteractiveMessage,
	getContentType
} = require('@whiskeysockets/baileys');
const axios = require('axios');
const cheerio = require('cheerio');
const chalk = require('chalk');
const { color } = require('./lib/color');
const cron = require('node-cron');
const didyoumean = require('didyoumean');
const fetch = require('node-fetch');
const ffmpeg = require('fluent-ffmpeg');
const fs = require('fs');
const fsx = require('fs-extra');
const gis = require('g-i-s');
const moment = require('moment-timezone');
const ms = require('parse-ms');
const nou = require('node-os-utils');
const os = require('os');
const path = require('path');
const PhoneNumber = require('awesome-phonenumber');
const { performance } = require('perf_hooks');
const { randomBytes } = require('crypto');
const speed = require('performance-now');
const similarity = require('similarity');
const toMS = require('ms');
const util = require('util');
const yts = require('yt-search');
const readmore = String.fromCharCode(8206).repeat(4001);

const { 
	exec, 
	execSync, 
	spawn 
} = require("child_process");

const { 
	toAudio, 
	toPTT, 
	toVideo 
} = require('./lib/converter');

const { 
	smsg, 
	await, 
	clockString, 
	delay, 
	enumGetKey, 
	fetchBuffer, 
	fetchJson, 
	format, 
	formatDate, 
	formatp, 
	generateProfilePicture, 
	getBuffer, 
	getGroupAdmins, 
	getRandom, 
	isUrl, 
	json, 
	logic, 
	msToDate, 
	parseMention, 
	runtime, 
	sleep, 
	sort, 
	toNumber 
} = require('./lib/myfunc');


const time = moment.tz('Asia/Jakarta').format('HH:mm:ss');
const date = moment.tz('Asia/Jakarta').format('DD/MM/YYYY');
const time2 = moment.tz('Asia/Jakarta').format('HH:mm:ss');

let ucapanWaktu = "Selamat Malam 🌌";

if (time2 < "05:00:00") {
	ucapanWaktu = "Selamat Pagi 🌄";
} else if (time2 < "11:00:00") {
	ucapanWaktu = "Selamat Pagi 🌄";
} else if (time2 < "15:00:00") {
	ucapanWaktu = "Selamat Siang 🌅";
} else if (time2 < "18:00:00") {
	ucapanWaktu = "Selamat Sore 🌇";
} else if (time2 < "19:00:00") {
	ucapanWaktu = "Selamat Petang 🌆";
}

module.exports = haruka = async (haruka, m, msg, chatUpdate, store) => {
	try {
		const {
			type,
			quotedMsg,
			mentioned,
			now,
			fromMe
		} = m
		const body = m.body
		const budy = m.text
		const prefix = /^[°•π÷×¶∆£¢€¥®™✓_=|~!?#$%^&.+-,\/\\©^]/.test(body) ? body.match(/^[°•π÷×¶∆£¢€¥®™✓_=|~!?#$%^&.+-,\/\\©^]/gi) : prefa
		const isCmd = body.startsWith(prefix)
		const isCommand = isCmd ? body.slice(1).trim().split(' ').shift().toLowerCase() : ""
		const command = isCmd ? body.slice(1).trim().split(' ').shift().toLowerCase() : ''
		const args = body.trim().split(/ +/).slice(1);
		const botNumber = await haruka.decodeJid(haruka.user.id);
		const pushname = m.pushName || "No Name"
		const text = q = args.join(" ");
		const getQuoted = (m.quoted || m);
		const quoted = (getQuoted.type == 'buttonsMessage') ? getQuoted[Object.keys(getQuoted)[1]] : (getQuoted.type == 'templateMessage') ? getQuoted.hydratedTemplate[Object.keys(getQuoted.hydratedTemplate)[1]] : (getQuoted.type == 'product') ? getQuoted[Object.keys(getQuoted)[0]] : m.quoted ? m.quoted : m
		const mime = (quoted.msg || quoted).mimetype || '';
		const qmsg = (quoted.msg || quoted);

		const isMedia = /image|video|sticker|audio/.test(mime);
		const isImage = (type == 'imageMessage');
		const isVideo = (type == 'videoMessage');
		const isAudio = (type == 'audioMessage');
		const isDocument = (type == 'documentMessage');
		const isLocation = (type == 'locationMessage');
		const isContact = (type == 'contactMessage');
		const isSticker = (type == 'stickerMessage');
		const isText = (type == 'textMessage');
		const isQuotedText = type === 'extendexTextMessage' && content.includes('textMessage');
		const isQuotedImage = type === 'extendedTextMessage' && content.includes('imageMessage');
		const isQuotedLocation = type === 'extendedTextMessage' && content.includes('locationMessage');
		const isQuotedVideo = type === 'extendedTextMessage' && content.includes('videoMessage');
		const isQuotedSticker = type === 'extendedTextMessage' && content.includes('stickerMessage');
		const isQuotedAudio = type === 'extendedTextMessage' && content.includes('audioMessage');
		const isQuotedContact = type === 'extendedTextMessage' && content.includes('contactMessage');
		const isQuotedDocument = type === 'extendedTextMessage' && content.includes('documentMessage');

		const isGroup = m.key.remoteJid.endsWith('@g.us');
		const groupMetadata = m.isGroup ? await haruka.groupMetadata(m.chat).catch(e => {}) : ''
		const groupName = m.isGroup ? groupMetadata.subject : ''
		const participants = m.isGroup ? await groupMetadata.participants : ''
		const groupAdmins = m.isGroup ? await getGroupAdmins(participants) : ''
		const isGroupAdmins = m.isGroup ? groupAdmins.includes(m.sender) : false
		const isBotAdmins = m.isGroup ? groupAdmins.includes(botNumber) : false
		const isAdmins = m.isGroup ? groupAdmins.includes(m.sender) : false
		const groupOwner = m.isGroup ? groupMetadata.owner : ''
		const isGroupOwner = m.isGroup ? (groupOwner ? groupOwner : groupAdmins).includes(m.sender) : false
		const AntiNsfw = m.isGroup ? ntnsfw.includes(m.chat) : false

		if (m.isGroup) {
			m.metadata = await haruka.groupMetadata(m.chat)
			m.admins = (m.metadata.participants.reduce((a, b) => (b.admin ? a.push({ id: b.id, admin: b.admin }) : [...a]) && a, []))
			m.isAdmin = m.admins.some((b) => b.id === m.sender)
			m.participant = m.key.participant
			m.isBotAdmin = !!m.admins.find((member) => member.id === botNumber)
		}

		const clientId = haruka.user.id.split(':')[0];
		const senderbot = m.key.fromMe ? haruka.user.id.split(':')[0] + "@s.whatsapp.net" || haruka.user.id : m.key.participant || m.key.remoteJid;
		const senderId = senderbot.split('@')[0];
		const isBot = clientId.includes(senderId);

		const isAfkOn = checkAfkUser(m.sender, afk)
		const isUser = userNumber.includes(m.sender);
		const isVip = db.data && db.data.users && db.data.users[m.sender] ? db.data.users[m.sender].vip : false;
		const isCreator = [botNumber, ...owner].map(v => v.replace(/[^0-9]/g, '') + '@s.whatsapp.net').includes(m.sender)
		const isPremium = isCreator || checkPremiumUser(m.sender, premium);
		expiredCheck(haruka, m, premium);

		let usernomor = await PhoneNumber('+' + m.sender.replace('@s.whatsapp.net', '')).getNumber('international');
		let ownnomor = await PhoneNumber('+' + ownerNumber.replace('@s.whatsapp.net', '')).getNumber('international');

		const fconver = {
			key: {
				fromMe: false,
				participant: `0@s.whatsapp.net`,
				...(m.chat ? {
					remoteJid: "0@s.whatsapp.net"
				} : {})
			},
			message: {
				conversation: `👤 *${pushname}*\n📞 *${usernomor}*`
			}
		};

		const fmen = {
			key: {
				fromMe: false,
				participant: `0@s.whatsapp.net`,
				...(m.chat ? {
					remoteJid: "0@s.whatsapp.net"
				} : {})
			},
			message: {
				conversation: `📝 *Pesan Menfess Baru!* ✨`
			}
		};

		async function reactionMessage(emo) {
			haruka.sendMessage(m.chat, {
				react: {
					text: emo,
					key: m.key
				}
			});
		}

		async function newReply(teks) {
			if (typereply === 'v1') {
				m.reply(teks);
			} else if (typereply === 'v2') {
				haruka.sendMessage(m.chat, {
					contextInfo: {
						mentionedJid: [m.sender],
						forwardingScore: 999999, 
						isForwarded: true, 
						forwardedNewsletterMessageInfo: {
							newsletterName: saluranName,
							newsletterJid: saluran,
						},
						externalAdReply: {
							showAdAttribution: true,
							title: botName,
							body: ownerName,
							previewType: "PHOTO",
							thumbnail: thumb,
							sourceUrl: wagc
						}
					},
					text: teks
				}, {
					quoted: m
				});
			} else if (typereply === 'v3') {
				haruka.sendMessage(m.chat, {
					text: teks,
					contextInfo: {
						mentionedJid: [m.sender],
						forwardingScore: 999999, 
						isForwarded: true, 
						forwardedNewsletterMessageInfo: {
							newsletterName: saluranName,
							newsletterJid: saluran,
						},
						externalAdReply: {
							showAdAttribution: true,
							title: botName,
							body: ownerName,
							thumbnail: thumb,
							sourceUrl: website,
							mediaType: 1,
							renderLargerThumbnail: true
						}
					}
				}, { 
					quoted: m 
				});
			} else if (typereply === 'v4') {
				const newrep = {
					contextInfo: {
						mentionedJid: [m.sender],
						forwardingScore: 999999, 
						isForwarded: true, 
						forwardedNewsletterMessageInfo: {
							newsletterName: saluranName,
							newsletterJid: saluran,
						},
						externalAdReply: {
							showAdAttribution: true,
							title: ucapanWaktu,
							body: botName,
							thumbnailUrl: thumbUrl,
							sourceUrl: website
						}
					},
					text: teks
				};
				return haruka.sendMessage(m.chat, newrep, {
					quoted: m,
				});
			}
		};

		async function sendButton(chat, judul, teks, button, m) {
			let msg = generateWAMessageFromContent(chat, {
				viewOnceMessage: {
					message: {
						'messageContextInfo': {
							'deviceListMetadata': {},
							'deviceListMetadataVersion': 2
						},
						interactiveMessage: proto.Message.InteractiveMessage.create({
							contextInfo: {
								mentionedJid: [m.sender],
								forwardingScore: 999999, 
								isForwarded: true, 
								forwardedNewsletterMessageInfo: {
									newsletterJid: saluran,
									newsletterName: saluranName, 
									serverMessageId: -1
								},
								businessMessageForwardInfo: { 
									businessOwnerJid: haruka.decodeJid(haruka.user.id) 
								},
							},
							body: proto.Message.InteractiveMessage.Body.create({
								text: teks
							}),
							footer: proto.Message.InteractiveMessage.Footer.create({
								text: botName
							}),
							header: proto.Message.InteractiveMessage.Header.create({
								title: judul,
								subtitle: ownerName,
								hasMediaAttachment: false
							}),
							nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
								buttons: button,
							})
						})
					}
				}
			}, { 
				quoted: m 
			})

			await haruka.relayMessage(msg.key.remoteJid, msg.message, {
				messageId: msg.key.id
			})
		}

		async function sendButtonImage(chat, judul, teks, buffer, button, m) {
			const uploadFile = { upload: haruka.waUploadToServer };
			const imageMessage = await prepareWAMessageMedia(
				{
					image: buffer,
				},
				uploadFile,
			);
			let msg = generateWAMessageFromContent(chat, {
				viewOnceMessage: {
					message: {
						'messageContextInfo': {
							'deviceListMetadata': {},
							'deviceListMetadataVersion': 2
						},
						interactiveMessage: proto.Message.InteractiveMessage.create({
							contextInfo: {
								mentionedJid: [m.sender],
								forwardingScore: 999999, 
								isForwarded: true, 
								forwardedNewsletterMessageInfo: {
									newsletterJid: saluran,
									newsletterName: saluranName, 
									serverMessageId: -1
								},
								businessMessageForwardInfo: { 
									businessOwnerJid: haruka.decodeJid(haruka.user.id) 
								},
							},
							body: proto.Message.InteractiveMessage.Body.create({
								text: teks
							}),
							footer: proto.Message.InteractiveMessage.Footer.create({
								text: botName
							}),
							header: proto.Message.InteractiveMessage.Header.create({
								title: judul,
								subtitle: ownerName,
								imageMessage: imageMessage.imageMessage,
								hasMediaAttachment: true
							}),
							nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
								buttons: button,
							})
						})
					}
				}
			}, {
				quoted: m
			})

			haruka.relayMessage(msg.key.remoteJid, msg.message, {
				messageId: msg.key.id
			})
		}

		async function sendButtonVideo(chat, judul, teks, buffer, button, m) {
			const uploadFile = { upload: haruka.waUploadToServer };
			const videoMessage = await prepareWAMessageMedia(
				{
					video: buffer,
				},
				uploadFile,
			);
			let msg = generateWAMessageFromContent(chat, {
				viewOnceMessage: {
					message: {
						'messageContextInfo': {
							'deviceListMetadata': {},
							'deviceListMetadataVersion': 2
						},
						interactiveMessage: proto.Message.InteractiveMessage.create({
							contextInfo: {
								mentionedJid: [m.sender],
								forwardingScore: 999999, 
								isForwarded: true, 
								forwardedNewsletterMessageInfo: {
									newsletterJid: saluran,
									newsletterName: saluranName, 
									serverMessageId: -1
								},
								businessMessageForwardInfo: {
									businessOwnerJid: haruka.decodeJid(haruka.user.id)
								},
							},
							body: proto.Message.InteractiveMessage.Body.create({
								text: teks
							}),
							footer: proto.Message.InteractiveMessage.Footer.create({
								text: botName
							}),
							header: proto.Message.InteractiveMessage.Header.create({
								title: judul,
								subtitle: ownerName,
								videoMessage: videoMessage.videoMessage,
								hasMediaAttachment: true
							}),
							nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
								buttons: button,
							})
						})
					}
				}
			}, {
				quoted: m
			})

			haruka.relayMessage(msg.key.remoteJid, msg.message, {
				messageId: msg.key.id
			})
		}

		async function sendButtonDocument(chat, judul, teks, thumb, button, m) {
			let msg = generateWAMessageFromContent(chat, {
				viewOnceMessage: {
					message: {
						'messageContextInfo': {
							'deviceListMetadata': {},
							'deviceListMetadataVersion': 2
						},
						interactiveMessage: proto.Message.InteractiveMessage.create({
							contextInfo: {
								mentionedJid: [m.sender],
								isForwarded: true,
								forwardedNewsletterMessageInfo: {
									newsletterJid: saluran,
									newsletterName: saluranName, 
									serverMessageId: -1
								},
								businessMessageForwardInfo: {
									businessOwnerJid: haruka.decodeJid(haruka.user.id)
								},
								externalAdReply: {
									title: ucapanWaktu,
									body: pushname,
									thumbnailUrl: thumbUrl,
									sourceUrl: wagc,
									mediaType: 1,
									renderLargerThumbnail: true
								}
							},
							body: proto.Message.InteractiveMessage.Body.create({
								text: teks
							}),
							footer: proto.Message.InteractiveMessage.Footer.create({
								text: botName
							}),
							header: proto.Message.InteractiveMessage.Header.create({
								title: judul,
								thumbnailUrl: thumbUrl,
								subtitle: ownerName,
								hasMediaAttachment: true,
								...(await prepareWAMessageMedia({
									document: thumb, 
									mimetype: 'image/png', 
									fileLength: 10000000000, 
									jpegThumbnail: thumb, 
									fileName: saluranName 
								}, { 
									upload: haruka.waUploadToServer
								}))
							}),
							nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
								buttons: button,
							})
						})
					}
				}
			}, {
				quoted: m
			})

			await haruka.relayMessage(msg.key.remoteJid, msg.message, {
				messageId: msg.key.id
			})
		};

		function capitalizeWords(str) {
			return str
				.split(' ')
				.map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
				.join(' ');
		}

		const pickRandom = (arr) => {
			return arr[Math.floor(Math.random() * arr.length)]
		}

		try {
			let isNumber = x => typeof x === 'number' && !isNaN(x);

			let user = db.data.users[m.sender] || {};
			if (typeof user !== 'object') db.data.users[m.sender] = {};
	
			let isPremium = checkPremiumUser(m.sender, premium);
			let limitUser = isPremium ? 1000 : 100;
			let uangUser = user.vip 
				? global.uang.vip 
				: isPremium 
					? global.uang.premium 
					: global.uang.free;

			if (!('vip' in user)) user.vip = false;
			if (!('badword' in user)) user.badword = 0;
			if (!('title' in user)) user.title = '';
			if (!('serialNumber' in user)) user.serialNumber = randomBytes(16).toString('hex');
			if (!('nick' in user)) user.nick = haruka.getName(m.sender);
			if (!isPremium) user.premium = false;
			if (!('totalLimit' in user)) user.totalLimit = limitUser;
			if (!isNumber(user.limit)) user.limit = limitUser;
			if (!('uang' in user)) user.uang = uangUser;
			if (!('lastclaim' in user)) user.lastclaim = new Date().getTime();
			if (!('lastrampok' in user)) user.lastrampok = new Date().getTime();
			if (!('pctime' in user)) user.pctime = '';

			db.data.users[m.sender] = user;

			let chats = db.data.chats[m.chat] || {};
			if (typeof chats !== 'object') db.data.chats[m.chat] = {};

			if (!('badword' in chats)) chats.badword = false;
			if (!('antiforeignnum' in chats)) chats.antiforeignnum = false;
			if (!('antiviewonce' in chats)) chats.antiviewonce = false;
			if (!('antibot' in chats)) chats.antibot = false;
			if (!('antispam' in chats)) chats.antispam = false;
			if (!('antimedia' in chats)) chats.antimedia = false;
			if (!('antiimage' in chats)) chats.antiimage = false;
			if (!('antivideo' in chats)) chats.antivideo = false;
			if (!('antiaudio' in chats)) chats.antiaudio = false;
			if (!('antisticker' in chats)) chats.antisticker = false;
			if (!('anticontact' in chats)) chats.anticontact = false;
			if (!('antilocation' in chats)) chats.antilocation = false;
			if (!('antidocument' in chats)) chats.antidocument = false;
			if (!('antilink' in chats)) chats.antilink = false;
			if (!('antilinkgc' in chats)) chats.antilinkgc = false;
			if (!('mute' in chats)) chats.mute = false;
			if (!('liststore' in chats)) chats.liststore = {};

			db.data.chats[m.chat] = chats;

			let setting = db.data.settings[botNumber] || {};
			if (typeof setting !== 'object') db.data.settings[botNumber] = {};

			if (!('totalhit' in setting)) setting.totalhit = 0;
			if (!('totalError' in setting)) setting.totalError = 0;
			if (!('online' in setting)) setting.online = false;
			if (!('safesearch' in setting)) setting.safesearch = false;
			if (!('autosticker' in setting)) setting.autosticker = false;
			if (!('autodownload' in setting)) setting.autodownload = false;
			if (!('autobio' in setting)) setting.autobio = false;
			if (!('autoread' in setting)) setting.autoread = false;
			if (!('autorecordtype' in setting)) setting.autorecordtype = false;
			if (!('autorecord' in setting)) setting.autorecord = false;
			if (!('autotype' in setting)) setting.autotype = false;
			if (!('autoblocknum' in setting)) setting.autoblocknum = false;
			if (!('onlygc' in setting)) setting.onlygc = false;
			if (!('onlypc' in setting)) setting.onlypc = false;
			if (!('watermark' in setting)) setting.watermark = { packname: global.packname, author: global.author };
			if (!('about' in setting)) setting.about = {
				bot: { nick: haruka.getName(botNumber), alias: botName },
				owner: { nick: haruka.getName(ownerNumber + '@s.whatsapp.net'), alias: ownerNumber }
			};

			db.data.settings[botNumber] = setting;

		} catch (err) {
			console.error('⚠️ Terjadi kesalahan:', err);
		}

		const react = async () => {
			const emojis = ["🌷", "🤙", "😂", "🤣", "😭", "🫂", "💔", "😡"]; 
			for (const emoji of emojis) {
				await sleep(80);
				await haruka.sendMessage(m.chat, { react: { text: emoji, key: m.key } });
			}
			await sleep(50);
			const randomEmoji = emojis[Math.floor(Math.random() * emojis.length)];
			await haruka.sendMessage(m.chat, { react: { text: randomEmoji, key: m.key } });
		};

		async function loading() {
			const lod = [
				"█▒▒▒▒▒▒▒▒▒▒▒ 10%",
				"████▒▒▒▒▒▒▒▒ 30%",
				"███████▒▒▒▒▒ 50%",
				"██████████▒▒ 80%",
				"████████████ 100%"
			];
			const { key } = await haruka.sendMessage(m.chat, { 
				text: mess.wait 
			}, { 
				quoted: m 
			});

			for (let i = 0; i < lod.length; i++) {
				await sleep(600);
				await haruka.sendMessage(m.chat, { 
					text: lod[i], 
					edit: key 
				});
			}
		};

		async function addExifAvatar(buffer, packname, author, categories = [''], extra = {}) {
			const { default: { Image } } = await import('node-webpmux');
			const img = new Image();

			const json = {
				'sticker-pack-id': 'Natsxe',
				'sticker-pack-name': packname,
				'sticker-pack-publisher': author,
				'emojis': categories,
				'is-avatar-sticker': 1,
				...extra
			};

			let exifAttr = Buffer.from([0x49, 0x49, 0x2A, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x41, 0x57, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00]);
			let jsonBuffer = Buffer.from(JSON.stringify(json), 'utf8');
			let exif = Buffer.concat([exifAttr, jsonBuffer]);

			exif.writeUIntLE(jsonBuffer.length, 14, 4);

			await img.load(buffer);
			img.exif = exif;

			return await img.save(null);
		}

		function generateRandomPassword(length) {
			let result = '';
			const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
			const charactersLength = characters.length;

			for (let i = 0; i < length; i++) {
				result += characters.charAt(Math.floor(Math.random() * charactersLength));
			}

			return result;
		};

		async function generateRandomHexName(length) {
			return randomBytes(Math.ceil(length / 2)).toString('hex').slice(0, length);
		};

		function formatBytes(bytes) {
			if (bytes === 0) return '0 Byte';

			const k = 1024;
			const sizes = ['Byte', 'KB', 'MB', 'GB', 'TB'];
			const i = Math.floor(Math.log(bytes) / Math.log(k));

			return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
		}

		function formatDuration(ms) {
			let seconds = Math.floor((ms / 1000) % 60);
			let minutes = Math.floor((ms / (1000 * 60)) % 60);
			let hours = Math.floor((ms / (1000 * 60 * 60)) % 24);
			return `${hours.toString().padStart(2, "0")}:${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`;
		}

		if (!m.isGroup && !isCreator && !isPremium && db.data.settings[botNumber].onlygc) {
			if (command) {
		let message = "⚠️ *「 WARNING 」* ⚠️\n";
		message += "Hai! 👋 Bot ini hanya bisa digunakan di grup.\n\n";
		message += "🤔 Ingin bot aktif di grup kamu?\n";
		message += "*Sewa atau beli premium sekarang!*\n\n";
		message += "Hubungi admin: wa.me/6285655548594";

				return newReply(message);
			}
		};

		if (!isCreator && db.data.settings[botNumber].onlypc && m.isGroup) {
			if (command) {
		let message = "⚠️ *「 WARNING 」* ⚠️\n";
		message += "Hai! 👋 Bot ini hanya bisa digunakan di private chat.\n\n";
		message += "🤔 Ingin bot aktif di chat kamu?\n";
		message += "*Sewa atau beli premium sekarang!*\n\n";
		message += "Hubungi admin: wa.me/6285655548594";

				return newReply(message);
			}
		}

		if (budy && !m.isNewsletter) {
			if (!m.isGroup && isCmd && !m.key.fromMe) {
				db.data.users[m.sender].pctime = new Date().getTime();
			}

			if (!m.isGroup && !isCmd && !m.key.fromMe) {
				const lastInteraction = new Date().getTime() - db.data.users[m.sender].pctime;
				if (lastInteraction > 21600000) {
					db.data.users[m.sender].pctime = new Date().getTime();

					if (m.sender === '6285655548594@s.whatsapp.net') {
						await haruka.sendMessage(m.chat, { 
							text: `Halo kak ${pushname}, senang banget bisa ngobrol lagi! Ada yang bisa aku bantu hari ini? 😊`, 
							ai: true 
						});
						haruka.sendMessage(m.chat, { 
							text: `Ketik *.menu* untuk melihat menu dan pilih fitur yang kamu butuhkan! 💬`, 
							ai: true 
						});
					} 

					else if (m.sender === '6283834312169@s.whatsapp.net') {
						await haruka.sendMessage(m.chat, { 
							text: `Ehh... ada kak Viona nih, kakak orang yang di spesialin owner aku itu kan? 🤔\nKalo iya, wahhh makasih banget udah mampir ke sini ya, Kak! 🤭❤️`, 
							ai: true 
						});
						haruka.sendMessage(m.chat, { 
							text: `Untuk mulai, ketik *.menu* agar aku bisa bantu dengan fitur-fitur yang ada! 💬`, 
							ai: true 
						});
					}

					else {
						await haruka.sendMessage(m.chat, { 
							text: `Halo kak ${pushname}, lama gak ngobrol nih! Ada yang bisa aku bantu? 😊`, 
							ai: true 
						});
						haruka.sendMessage(m.chat, { 
							text: `Ketik *.menu* untuk melihat menu yang tersedia dan pilih fitur yang kamu butuhkan! 💬`, 
							ai: true 
						});
					}
				}
			}
		}

		if (!haruka.public) {
			if (!isCreator && !m.key.fromMe) return;
		};

		if (db.data.settings[botNumber].online) {
			if (command) {
				haruka.sendPresenceUpdate('unavailable', m.chat);
			}
		}

		if (db.data.settings[botNumber].autoread) {
			haruka.readMessages([m.key]);
		}

		if (db.data.settings[botNumber].autobio) {
			haruka.updateProfileStatus(`${botName} Telah Berjalan Selama ${runtime(process.uptime())}`).catch(_ => _);
		}

		if (db.data.settings[botNumber].autorecordtype) {
			if (command) {
				let mix = ['composing', 'recording'];
				let mix2 = mix[Math.floor(mix.length * Math.random())];
				haruka.sendPresenceUpdate(mix2, m.chat);
			}
		}

		if (db.data.settings[botNumber].autorecord) {
			if (command) {
				let mix = ['recording'];
				let mix2 = mix[Math.floor(mix.length * Math.random())];
				haruka.sendPresenceUpdate(mix2, m.chat);
			}
		}

		if (db.data.settings[botNumber].autotype) {
			if (command) {
				let pos = ['composing'];
				haruka.sendPresenceUpdate(pos, m.chat);
			}
		}

		if (m.sender.startsWith(`${autoblocknumber}`) && db.data.settings[botNumber].autoblocknum === true) {
			return haruka.updateBlockStatus(m.sender, 'block');
		}

		if (!m.sender.startsWith(`${antiforeignnumber}`) && db.data.chats[m.chat].antiforeignnum === true) { 
			if (isCreator || isAdmins || !isBotAdmins) return;
			haruka.sendMessage(m.chat, { text: `Maaf, kamu akan dihapus karena admin/owner grup telah mengaktifkan anti-nomor asing, hanya kode negara +${antiforeignnumber} yang boleh bergabung` }, { quoted: m });
			await sleep(2000);
			await haruka.groupParticipantsUpdate(m.chat, [m.sender], 'remove');
		}

		let list = []
		for (let i of owner) {
			list.push({
				displayName: await haruka.getName(i),
				vcard: `BEGIN:VCARD\nVERSION:3.0\nN:${await haruka.getName(i)}\nFN:${await haruka.getName(i)}\nitem1.TEL;waid=${i}:${i}\nitem1.X-ABLabel:Click here to chat\nitem2.EMAIL;type=INTERNET:${ytname}\nitem2.X-ABLabel:YouTube\nitem3.URL:${socialm}\nitem3.X-ABLabel:GitHub\nitem4.ADR:;;${location};;;;\nitem4.X-ABLabel:Region\nEND:VCARD`
			})
		}

		cron.schedule('00 00 * * *', () => {
			let user = Object.keys(db.data.users)
			for (let jid of user) {
				const limitUser = db.data.users[jid].vip ? global.limit.vip : checkPremiumUser(jid, premium) ? global.limit.premium : global.limit.free
				db.data.users[jid].limit = limitUser
			}
		}, {
			scheduled: true,
			timezone: 'Asia/Jakarta'
		});

		if (m.message) {
			console.log(chalk.black.bgWhite('[ MESSAGE ]:'),chalk.black.bgGreen(new Date), chalk.black.bgHex('#00EAD3')(budy || m.type) + '\n' + chalk.black(chalk.bgCyanBright('[ FROM ] :'),chalk.bgYellow(m.pushName),chalk.bgHex('#FF449F')(m.sender),chalk.bgBlue('(' + (m.isGroup ? m.pushName : 'Private Chat', m.chat) + ')')));
		};

		if (db.data.chats[m.chat].antiviewonce && m.isGroup && m.mtype == 'viewOnceMessageV2') {
			let val = { ...m };
			let msg = val.message?.viewOnceMessage?.message || val.message?.viewOnceMessageV2?.message;
			delete msg[Object.keys(msg)[0]].viewOnce;
			val.message = msg;
			await haruka.sendMessage(m.chat, { 
				forward: val 
			}, { 
				quoted: m 
			});
		}

		if (db.data.chats[m.chat].antibot) {
			if (m.isBaileys) {
				if (m.key.fromMe || isAdmins || isCreator || !isBotAdmins) return
				await haruka.sendMessage(m.chat, { delete: m.key });
				haruka.groupParticipantsUpdate(m.chat, [m.sender], 'remove');
			}
		};

		if (db.data.chats[m.chat].antispam) {
			if (m.isGroup && m.message && isFiltered(m.chat)) {
				console.log(`[SPAM]`, color(moment(m.messageTimestamp * 100).format('DD/MM/YYYY HH:mm:ss'), 'yellow'), color(`${command} [${args.length}]`), 'dari', color(m.pushName));
				return await haruka.groupParticipantsUpdate(m.chat, [m.sender], 'remove');
			}
		}

		if (db.data.chats[m.chat].antimedia && isMedia) {
			if (isCreator || isAdmins || !isBotAdmins){
			} else {
				return haruka.sendMessage(m.chat, { delete: { remoteJid: m.chat, fromMe: false, id: m.key.id, participant: m.key.participant }})
			}
		}

		if (db.data.chats[m.chat].image && m.mtype) {
			if (m.mtype === "imageMessage") {
				if (isCreator || isAdmins || !isBotAdmins) {
				} else {
					return haruka.sendMessage(m.chat, { delete: { remoteJid: m.chat, fromMe: false, id: m.key.id, participant: m.key.participant } });
				}
			}
		}

		if (db.data.chats[m.chat].antivideo && m.mtype) {
			if (m.mtype === "videoMessage") {
				if (isCreator || isAdmins || !isBotAdmins) {
				} else {
					return haruka.sendMessage(m.chat, { delete: { remoteJid: m.chat, fromMe: false, id: m.key.id, participant: m.key.participant } });
				}
			}
		}

		if (db.data.chats[m.chat].antisticker && m.mtype) {
			if (m.mtype === "stickerMessage") {
				if (isCreator || isAdmins || !isBotAdmins) {
				} else {
					return haruka.sendMessage(m.chat, { delete: { remoteJid: m.chat, fromMe: false, id: m.key.id, participant: m.key.participant } });
				}
			}
		}

		if (db.data.chats[m.chat].antiaudio && m.mtype) {
			if (m.mtype === "audioMessage") {
				if (isCreator || isAdmins || !isBotAdmins) {
				} else {
					return haruka.sendMessage(m.chat, { delete: { remoteJid: m.chat, fromMe: false, id: m.key.id, participant: m.key.participant } });
				}
			}
		}

		if (db.data.chats[m.chat].antilocation && m.mtype) {
			if (m.mtype === "locationMessage") {
				if (isCreator || isAdmins || !isBotAdmins) {
				} else {
					return haruka.sendMessage(m.chat, { delete: { remoteJid: m.chat, fromMe: false, id: m.key.id, participant: m.key.participant } });
				}
			}
		}

		if (db.data.chats[m.chat].antidocument && m.mtype) {
			if (m.mtype === "documentMessage") {
				if (isCreator || isAdmins || !isBotAdmins) {
				} else {
					return haruka.sendMessage(m.chat, { delete: { remoteJid: m.chat, fromMe: false, id: m.key.id, participant: m.key.participant } });
				}
			}
		}

		if (db.data.chats[m.chat].anticontact && m.mtype) {
			if (m.mtype === "contactMessage") {
				if (isCreator || isAdmins || !isBotAdmins) {
				} else {
					return haruka.sendMessage(m.chat, { delete: { remoteJid: m.chat, fromMe: false, id: m.key.id, participant: m.key.participant } });
				}
			}
		}

		if (db.data.chats[m.chat].badword) {
			for (let bak of bad) {
				if (budy === bak) {
					let baduser = await db.data.users[m.sender].badword;
					haruka.sendMessage(m.chat, {
						delete: {
							remoteJid: m.chat,
							fromMe: false,
							id: m.key.id,
							participant: m.key.participant
						}
					});
				}
			}
		}

		if (db.data.settings[botNumber].autodownload && !m.key.fromMe && !isCmd) {
			try {
				if (budy.match(`instagram.com`)) {
					await haruka.sendMessage(m.chat, { react: { text: "⏱️", key: m.key } });
					let anu = await fetchJson(`https://api.junn4.my.id/download/instagram?url=${budy}`);
					haruka.sendMessage(m.chat, { video: { url: anu.result.media }, caption: `Auto Download ✅` }, { quoted: m });
					await haruka.sendMessage(m.chat, { react: { text: "☑️", key: m.key } });
				} else if (budy.match(`tiktok.com`)) {
					await haruka.sendMessage(m.chat, { react: { text: "⏱️", key: m.key } });
					let anu = await fetchJson(`https://api.junn4.my.id/download/tiktok?url=${budy}`);
					haruka.sendMessage(m.chat, { video: { url: anu.result.Medium.url }, caption: `Auto Download ✅` }, { quoted: m });
					await haruka.sendMessage(m.chat, { react: { text: "☑️", key: m.key } });
				} else if (budy.match(`facebook.com`)) {
					await haruka.sendMessage(m.chat, { react: { text: "⏱️", key: m.key } });
					let anu = await fetchJson(`https://api.junn4.my.id/download/facebook?url=${budy}`);
					haruka.sendMessage(m.chat, { video: { url: anu.result.video_sd }, caption: `Auto Download ✅` }, { quoted: m });
					await haruka.sendMessage(m.chat, { react: { text: "☑️", key: m.key } });
				} else if (budy.match(`youtube.com|youtu.be`)) {
					await haruka.sendMessage(m.chat, { react: { text: "⏱️", key: m.key } });
					let anu = await fetchJson(`https://api.junn4.my.id/download/ytmp4?url=${budy}`);
					haruka.sendMessage(m.chat, { video: { url: anu.result.result }, caption: `` }, { quoted: m });
					await haruka.sendMessage(m.chat, { react: { text: "☑️", key: m.key } });
				}
			} catch (err) {
				await haruka.sendMessage(m.chat, { react: { text: "✖️", key: m.key } });
			}
		}

		if (db.data.settings[botNumber].autosticker) {
			if (m.key.fromMe) return;
			if (m.isGroup) return;

			if (/image/.test(mime) && !/webp/.test(mime)) {
				let mediac = await haruka.downloadAndSaveMediaMessage(quoted);
				haruka.sendImageAsSticker(m.chat, mediac, m, { packname: global.packname, author: global.author });
			} else if (/video/.test(mime)) {
				if ((quoted.msg || quoted).seconds > 11) return;
				let mediac = await haruka.downloadAndSaveMediaMessage(quoted);
				haruka.sendVideoAsSticker(m.chat, mediac, m, { packname: global.packname, author: global.author });
			}
		}

		if (db.data.settings[botNumber].safesearch && command && !m.key.fromMe && !isCreator) {
			if (budy.match(/colmek|coli|desah|bokep|tobrut|seksi|sex|sexy|memek|kontol|titit|telanjang|ngentod|ngentot|ngewe|ewe|ewean/i)) {
				newReply(`🚫 Ups, kata tersebut dilarang di sini ya, kak! Mari jaga lingkungan chat ini tetap positif dan nyaman untuk semua orang. 😊`);
				return;
			}
		}

		if (!isCreator && !m.key.fromMe && m.message) {
			if (budy.match(`@${ownerNumber}`)) {
				await haruka.sendMessage(m.chat, { 
					text: `👋 Hai kak! Sepertinya kakak lagi butuh bantuan dari *${ownerName}*, ya?\n\nOwner mungkin lagi sibuk nih, tapi tenang aja, nanti bakal dibales secepatnya! ✨ Sabar yaa~ 😊`
				}, {
					quoted: m
				});
			}
		};

		if (db.data.chats[m.chat].antilinkgc) {
			if (budy.match(`chat.whatsapp.com`)) {
				if (isAdmins) return
				if (m.key.fromMe) return
				if (isCreator) return

				await haruka.sendMessage(m.chat, {
					delete: {
						remoteJid: m.chat,
						fromMe: false,
						id: m.key.id,
						participant: m.key.participant
					}
				});
			}
		}

		if (db.data.chats[m.chat].antilink) {
			const linkPatterns = [
				/http/i,
				/https/i,
				/www\./i,
				/wa\.me/i,
				/t\.me/i,
				/bit\.ly/i,
				/goo\.gl/i,
				/y2u\.be/i,
				/discord\.gg/i,
				/telegram\.me/i
			];
			const containsLink = linkPatterns.some(pattern => pattern.test(budy));
			if (containsLink) {
				if (isAdmins || m.key.fromMe || isCreator) return
				await haruka.sendMessage(m.chat, {
					delete: {
						remoteJid: m.chat,
						fromMe: false,
						id: m.key.id,
						participant: m.key.participant
					}
				});
			}
		}

		if (m.isGroup) {
			if (db.data.chats[m.chat].mute && !isCreator) {
				return
			}
		}

		const feature = () => {
			var mytext = fs.readFileSync("./case.js").toString();
			var numUpper = (mytext.match(/case '/g) || []).length;
			return numUpper;
		}

		for (let i of audionye) {
			if (budy === i) {
				let audiobuffy = fs.readFileSync(`./media/${i}.mp3`);
				haruka.sendMessage(m.chat, { audio: audiobuffy, mimetype: 'audio/mp4', ptt: true }, { quoted: m });
			}
		}

		for (let i of setiker) {
			if (budy === i) {
				let stickerbuffy = fs.readFileSync(`./media/${i}.webp`);
				haruka.sendMessage(m.chat, { sticker: stickerbuffy }, { quoted: m });
			}
		}

		for (let i of imagenye) {
			if (budy === i) {
				let imagebuffy = fs.readFileSync(`./media/${i}.jpg`);
				haruka.sendMessage(m.chat, { image: imagebuffy }, { quoted: m });
			}
		}

		for (let i of videonye) {
			if (budy === i) {
				let videobuffy = fs.readFileSync(`./media/${i}.mp4`);
				haruka.sendMessage(m.chat, { video: videobuffy }, { quoted: m });
			}
		}

		if (m.isGroup && db.data.chats[m.chat].liststore[body]) {
			let teks = db.data.chats[m.chat].liststore[body].response
			if (db.data.chats[m.chat].liststore[body].img) {
				haruka.sendMessage(m.chat, {
					image: {
						url: db.data.chats[m.chat].liststore[body].img
					},
					caption: teks
				}, {
					quoted: m
				})
			} else if (db.data.chats[m.chat].liststore[body].video) {
				haruka.sendMessage(m.chat, {
					video: {
						url: db.data.chats[m.chat].liststore[body].video
					},
					caption: teks
				}, {
					quoted: m
				})
			} else {
				const contentText = {
					text: teks,
					contextInfo: {
						mentionedJid: [m.sender],
						forwardingScore: 999999, 
						isForwarded: true, 
						forwardedNewsletterMessageInfo: {
							newsletterName: saluranName,
							newsletterJid: saluran,
						},
						externalAdReply: {
							showAdAttribution: true,
							containsAutoReply: true,
							title: `Store List 🛍️`,
							body: botName,
							previewType: "PHOTO",
							thumbnailUrl: `https://pomf2.lain.la/f/sdzl7dc2.jpg`,
							sourceUrl: wagc
						}
					}
				};
				haruka.sendMessage(m.chat, contentText, {
					quoted: m,
				});
			}
		}

		if (isMedia && m.msg.fileSha256 && (m.msg.fileSha256.toString('base64') in db.data.sticker)) {
			let hash = db.data.sticker[m.msg.fileSha256.toString('base64')];
			let { text, mentionedJid } = hash;
			let messages = await generateWAMessage(m.chat, { text: text, mentions: mentionedJid }, {
				userJid: haruka.user.id,
				quoted: m.quoted && m.quoted.fakeObj
			});
			messages.key.fromMe = areJidsSameUser(m.sender, haruka.user.id);
			messages.key.id = m.key.id;
			messages.pushName = m.pushName;
			if (m.isGroup) messages.participant = m.sender;
			let msg = {
				...chatUpdate,
				messages: [proto.WebMessageInfo.fromObject(messages)],
				type: 'append'
			};
			haruka.ev.emit('messages.upsert', msg);
		}

		if (m.message && !isUser) {
			userNumber.push(m.sender)
			fs.writeFileSync('./src/data/role/user.json', JSON.stringify(userNumber, null, 2))
		}

		if (m.isGroup && !m.key.fromMe) {
			let mentionUser = [...new Set([...(m.mentionedJid || []), ...(m.quoted ? [m.quoted.sender] : [])])]
			for (let ment of mentionUser) {
				if (checkAfkUser(ment, afk)) {
					let getId2 = getAfkId(ment, afk)
					let getReason2 = getAfkReason(getId2, afk)
					let getTimee = Date.now() - getAfkTime(getId2, afk)
					let anu2 = ms(getTimee)
					newReply(
						`Eh, jangan di-tag dulu ya! Dia lagi AFK nih~ 🤭\n\n` +
						`*Alasan:* ${getReason2}\n` +
						`*Udah sejak:* ${anu2.hours} Jam, ${anu2.minutes} Menit, ${anu2.seconds} Detik`
					)
				}
			}

			if (checkAfkUser(m.sender, afk)) {
				let getId = getAfkId(m.sender, afk)
				let getReason = getAfkReason(getId, afk)
				let getTime = Date.now() - getAfkTime(getId, afk)
				let anu = ms(getTime)
				afk.splice(getAfkPosition(m.sender, afk), 1)
				fs.writeFileSync('./src/afk.json', JSON.stringify(afk))
				haruka.sendTextWithMentions(
					m.chat, 
					`Yeay! @${m.sender.split('@')[0]} udah balik dari AFK nih~ 🥳\n\n` +
					`*Alasan:* ${getReason}\n` +
					`*Selama:* ${anu.hours} Jam, ${anu.minutes} Menit, ${anu.seconds} Detik`, 
					m
				)
			}
		}

		haruka.autosholat = haruka.autosholat ? haruka.autosholat : {};
		if (!(m.chat in haruka.autosholat)) {
			let jadwalSholat = {
				Fajr: "03:30",
				Dhuhr: "11:50",
				Asr: "15:30",
				Maghrib: "18:50",
				Isha: "20:10",
			};
			const date = new Date((new Date).toLocaleString("en-US", {
				timeZone: "Asia/Tokyo"
			}));
			const hours = date.getHours();
			const minutes = date.getMinutes();
			const timeNow = `${hours.toString().padStart(2, "0")}:${minutes.toString().padStart(2, "0")}`;

			for (const [sholat, waktu] of Object.entries(jadwalSholat)) {
				if (timeNow === waktu) {
					haruka.autosholat[m.chat] = [
						haruka.sendMessage(m.chat, {
							text: `📢 *Waktu Sholat ${sholat} Telah Tiba!* 🕌\n\n"Sesungguhnya sholat itu adalah kewajiban yang ditentukan waktunya atas orang-orang yang beriman." *(QS. An-Nisa: 103)*\n\nSegeralah tinggalkan aktivitasmu sejenak, ambillah air wudhu, dan tunaikan sholat tepat pada waktunya. Jangan sampai kita termasuk orang yang lalai.`,
							contextInfo: {
								mentionedJid: [m.sender],
								forwardingScore: 999999, 
								isForwarded: true, 
								forwardedNewsletterMessageInfo: {
									newsletterName: saluranName,
									newsletterJid: saluran,
								},
								externalAdReply: {
									showAdAttribution: true,
									title: `Selamat Beribadah, Kak! 🕌`,
									body: 'Shinjuku Area, Tokyo, Japan',
									previewType: "PHOTO",
									thumbnailUrl: 'https://files.catbox.moe/0xvhqu.jpg',
									sourceUrl: wagc
								}
							}
						}),
						setTimeout(() => {
							delete haruka.autosholat[m.chat];
						}, 60000)
					];
				}
			}
		};

		if (command) {
			if (isFiltered(m.sender) && !isCreator && !m.key.fromMe) return newReply(`Don't spam! please give pause for a few seconds.`)
			addFilter(m.sender);
		}

		if (isCmd) {
			if (command) {
				const code = fs.readFileSync("./case.js", "utf8")
				var regex = /case\s+'([^']+)':/g;
				var matches = [];
				var match;
				while ((match = regex.exec(code))) {
					matches.push(match[1]);
				}
				const help = Object.values(matches).flatMap(v => v ?? []).map(entry => entry.trim().split(' ')[0].toLowerCase()).filter(Boolean);
				if (!help.includes(command) && !budy.startsWith('$ ') && !budy.startsWith('> ')) {
					let mean = didyoumean(command, help);
					let sim = similarity(command, mean);
					let similarityPercentage = parseInt(sim * 100);
					if (mean && command.toLowerCase() !== mean.toLowerCase()) {
						const pesanTemplate = `*Eits, kayaknya ada yang salah nih...* 😅\n_Mungkin yang kakak maksud itu:_\n\n➠ *${prefix + mean}* (${similarityPercentage}%)\n\n_Coba ketuk *Menu* buat lihat daftar lengkapnya ya!_ 🌟`;
						haruka.sendMessage(m.chat,{
							image: thumb,
							caption: pesanTemplate,
							footer: botName,
							buttons: [
								{
									buttonId: prefix + mean,
									buttonText: {
										displayText: prefix + mean
									}
								},
								{
									buttonId: `${prefix}menu`,
									buttonText: {
										displayText: "📜 Kembali ke Menu"
									}
								}
							],
							viewOnce: true,
						}, {
							quoted: m
						});
					}
				}
			}
		};

	
		switch (command) {		
			
			case 'cmd':
			case 'menu':{
				let timestampe = speed();
				let latensie = speed() - timestampe;
				let a = db.data.users[m.sender];
				let me = m.sender;
				let teks = `┌──❖ Halo, Kak ${pushname}! 👋✨\n│ ✧ ${ucapanWaktu} yaa! 😊\n└────────────⳹\n\n${readmore}🌟 *𝐁𝐎𝐓 𝐈𝐍𝐅𝐎*\n⨳ *Speed:* ${latensie.toFixed(4)} ms\n⨳ *Runtime:* ${runtime(process.uptime())}\n⨳ *Bot:* ${botName}\n⨳ *Owner:* +${ownerNumber}\n⨳ *Mode:* ${haruka.public ? 'Public' : 'Self'}\n⨳ *Platform:* ${os.platform()}\n⨳ *Total User:* ${Object.keys(db.data.users).length}\n⨳ *Total Chat:* ${Object.keys(global.db.data.chats).length}\n\n🧍 *𝐔𝐒𝐄𝐑 𝐈𝐍𝐅𝐎*\n⨳ *Nama:* ${pushname}\n⨳ *Number:* +${me.split('@')[0]}\n⨳ *Limit:* ${a.limit}\n⨳ *Status:* ${isVip ? 'VIP User' : isPremium ? 'Premium User' : 'Free User'}\n⨳ *Serial:* ${a.serialNumber}\n\n🕒 *𝐓𝐈𝐌𝐄 𝐈𝐍𝐅𝐎*\n⨳ *Time:* ${time}\n⨳ *Date:* ${date}\n\n✨ *Silahkan pilih menu di bawah ini, Kak!* 🥰`;
				let msg = generateWAMessageFromContent(m.chat, {
					viewOnceMessage: {
						message: {
							"messageContextInfo": {
								"deviceListMetadata": {},
								"deviceListMetadataVersion": 2
							},
							interactiveMessage: proto.Message.InteractiveMessage.create({
								body: proto.Message.InteractiveMessage.Body.create({
									text: teks
								}),
								footer: proto.Message.InteractiveMessage.Footer.create({
									text: ownerName
								}),
								header: proto.Message.InteractiveMessage.Header.create({
									...(await prepareWAMessageMedia({ image: thumb }, { upload: haruka.waUploadToServer })), 
									title: '',
									subtitle: '',
									hasMediaAttachment: false
								}),
								nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
									buttons: [
										{
											"name": "single_select",
											"buttonParamsJson": `{
												"title": "Click Here ⎙",
												"sections": [{
													"title": "Select Menu",
													"rows": [{
														"title": "📚 All Menu",
														"description": "Lihat semua menu seru di sini, kak! 🌟",
														"id": "${prefix}allmenu"
													},
													{
														"title": "🗝️ Owner's Secret Room",
														"description": "Psst... Rahasia nih! Cuma kakak spesial yang bisa masuk~ 🤫",
														"id": "${prefix}ownermenu"
													},
													{
														"title": "👥 Group Menu",
														"description": "Ayo intip menu khusus grup, seru-seruan bareng! 👥",
														"id": "${prefix}groupmenu"
													},
													{
														"title": "🔍 Search Menu",
														"description": "Cari apa aja di sini, Mora bantu nemuin kok~ 🔍",
														"id": "${prefix}searchmenu"
													},
													{
														"title": "📥 Download Menu",
														"description": "Unduh apa yang kakak butuhin, gampang kok! 📥",
														"id": "${prefix}downloadmenu"
													},
													{
														"title": "🛠️ Converter/Tools Menu",
														"description": "Bikin stiker, ubah audio, dan banyak alat seru lainnya di sini, Kak! 🎵✨",
														"id": "${prefix}convertmenu"
													},
													{
														"title": "🛒 Store Menu",
														"description": "Belanja-belanja lucu di sini aja, kak! 🛒",
														"id": "${prefix}storemenu"
													},
													{
														"title": "🦖 Pterodactyl Menu",
														"description": "Fitur panel Pterodactyl untuk mengelola server, menambah atau menghapus user, serta mengatur sumber daya server dengan mudah.",
														"id": "${prefix}panelmenu"
													},
													{
														"title": "🎮 Game Menu",
														"description": "Fitur Game untuk seru-seruan seperti tebak-tebakan dsb. 😋",
														"id": "${prefix}gamemenu"
													},
													{
														"title": "🎉 Fun Menu",
														"description": "Fitur Fun untuk seru-seruan, dicoba yuk! ✨",
														"id": "${prefix}funmenu"
													},
													{
														"title": "😋 Random Anime Menu",
														"description": "Menu yang berisi gambar Anime, cari gambar waifu kamu disini ya! 😍",
														"id": "${prefix}randomanimemenu"
													},
													{
														"title": "✨ Other Menu",
														"description": "Menu tambahan yang nggak kalah menarik, cek yuk! 💫",
														"id": "${prefix}othermenu"
													}]
												}]
											}`
										},
										{
											"name": "cta_url",
											"buttonParamsJson": `{
												"display_text": "My Handsome Owner 🐬",
												"url": "https://api.whatsapp.com/send?phone=${ownerNumber}",
												"merchant_url": "https://www.google.com"
											}`
										}
									],
								}),
								contextInfo: {
									mentionedJid: [m.sender], 
									forwardingScore: 999999,
									isForwarded: true,
									forwardedNewsletterMessageInfo: {
										newsletterJid: saluran,
										newsletterName: saluranName,
										serverMessageId: 143
									}
								}
							})
						}
					}
				}, { 
					quoted: m 
				})

				await haruka.relayMessage(
					msg.key.remoteJid, 
					msg.message, { 
						messageId: msg.key.id 
					}
				);

				haruka.sendMessage(m.chat, { 
					audio: fs.readFileSync(`./media/music.mp3`), 
					mimetype: 'audio/mp4', 
					ptt: true 
				}, { 
					quoted: m 
				});
			}
			break;

			default:
			if (budy.startsWith('=>')) {
				if (!isCreator) return
				function Return(sul) {
					sat = JSON.stringify(sul, null, 2)
					bang = util.format(sat)
					if (sat == undefined) {
						bang = util.format(sul)
					}
					return m.reply(bang)
				}
				try {
					newReply(util.format(eval(`(async () => { return ${budy.slice(3)} })()`)))
				} catch (e) {
					newReply(String(e))
				}
			};

			if (budy.startsWith('>')) {
				if (!isCreator) return
				try {
					let evaled = await eval(budy.slice(2))
					if (typeof evaled !== 'string') evaled = require('util').inspect(evaled)
					await newReply(evaled)
				} catch (err) {
					await newReply(String(err))
				}
			};

			if (budy.startsWith('$')) {
				if (!isCreator) return
				exec(budy.slice(2), (err, stdout) => {
					if (err) return m.reply(err)
					if (stdout) return m.reply(stdout)
				})
			};

			if (isCmd && budy.toLowerCase() != undefined) {
				if (m.chat.endsWith('broadcast')) return
				if (m.isBaileys) return
				let msgs = db.data.database
				if (!(budy.toLowerCase() in msgs)) return
				haruka.copyNForward(m.chat, msgs[budy.toLowerCase()], true, {quoted: m})
			}

			if (m.chat.endsWith('@s.whatsapp.net') && !isCmd) {
				try {
					this.menfes = this.menfes || {};
					let room = Object.values(this.menfes).find(room => 
						[room.a, room.b].includes(m.sender) && room.state === 'CHATTING'
					);
					if (room) {
						if (/^.*(next|leave|start)/.test(m.text)) return;
						if (['.next', '.leave', '.stop', '.start', 'Cari Partner', 'Keluar', 'Lanjut', 'Stop'].includes(m.text)) return;
						let find = Object.values(this.menfes).find(menpes => 
							[menpes.a, menpes.b].includes(m.sender)
						);
						let other = find.a === m.sender ? find.b : find.a;
						if (m.mtype === 'conversation' || m.mtype === 'extendedTextMessage') {
							await haruka.sendMessage(other, {
								text: m.text,
								mentions: [other]
							}, { 
								quoted: fmen 
							});
						}
						if (['imageMessage', 'videoMessage', 'audioMessage', 'documentMessage', 'stickerMessage'].includes(m.mtype)) {
							let media;
							try {
								media = await m.download();
							} catch (err) {
								console.error('Gagal mengunduh media:', err);
								await haruka.sendMessage(m.sender, { text: 'Gagal mengunduh media. Pastikan media masih valid dan coba lagi.' });
								return;
							}
							let options = {
								caption: m.msg?.caption || '',
								mentions: [other]
							};
							if (m.mtype === 'imageMessage') {
								await haruka.sendMessage(other, { image: media, ...options });
							} 
							else if (m.mtype === 'videoMessage') {
								await haruka.sendMessage(other, { video: media, ...options });
							} 
							else if (m.mtype === 'audioMessage') {
								await haruka.sendMessage(other, { audio: media, mimetype: 'audio/mpeg', ...options });
							} 
							else if (m.mtype === 'documentMessage') {
								await haruka.sendMessage(other, { document: media, mimetype: m.msg?.mimetype, fileName: m.msg?.fileName, ...options });
							} 
							else if (m.mtype === 'stickerMessage') {
								await haruka.sendMessage(other, { sticker: media });
							} 
							else {
								console.warn('Tipe media tidak dikenali:', m.mtype);
							}
						}
					}
				} catch (err) {
					console.error('Error di fitur Menfess:', err);
					await haruka.sendMessage(m.sender, { text: 'Terjadi kesalahan saat mengirim pesan ke pasangan Menfess. Silakan coba lagi nanti.' });
				}
			}
		}
	} catch (err) {
		console.log(chalk.yellow.bold("[ ERROR ] case.js :\n") + chalk.redBright(util.format(err)));
	}
};

let file = require.resolve(__filename);
fs.watchFile(file, () => {
	fs.unwatchFile(file)
	console.log(chalk.redBright(`Update ${__filename}`))
	delete require.cache[file]
	require(file)
});

####### file package.json
{
  "name": "Mora-AI",
  "version": "6.0.2",
  "description": "WhatsApp Bot Multi Device",
  "main": "index.js",
  "type": "commonjs",
  "directories": {
    "lib": "lib",
    "src": "src",
    "media": "media"
  },
  "scripts": {
    "start": "node index.js"
  },
  "author": "Khalid",
  "license": "MIT",
  "dependencies": {
    "@whiskeysockets/baileys" : "npm:@fizzxydev/baileys-pro",
    "@adiwajshing/keyed-db": "^0.2.4",
    "@hapi/boom": "^10.0.1",
    "@vitalets/google-translate-api": "^8.0.0",
    "awesome-phonenumber": "^5.9.0",
    "axios": "^1.4.0",
    "chalk": "^4.1.2",
    "cheerio": "^1.0.0-rc.12",
    "didyoumean": "^1.2.2",
    "file-type": "^16.5.3",
    "fluent-ffmpeg": "^2.1.2",
    "form-data": "^4.0.0",
    "fs-extra": "^11.1.1",
    "g-i-s": "^2.1.7",
    "got": "^11.8.3",
    "human-readable": "^0.2.1",
    "jimp": "^0.16.1",
    "jsdom": "^22.1.0",
    "lodash": "^4.17.21",
    "mathjs": "^11.3.0",
    "megajs": "^1.1.4",
    "moment-timezone": "^0.5.43",
    "mal-scraper": "^2.13.2",
    "ms": "^2.1.3",
    "node-cron": "^3.0.0",
    "node-fetch": "^2.6.1",
    "node-gtts": "^2.0.2",
    "node-os-utils": "^1.3.6",
    "node-webpmux": "^3.1.1",
    "parse-ms": "^2.1.0",
    "performance-now": "^2.1.0",
    "pino": "^8.14.1",
    "qrcode": "^1.5.3",
    "qrcode-reader": "^1.0.4",
    "qrcode-terminal": "^0.12.0",
    "steno": "^1.0.0",
    "similarity": "^1.2.1",
    "yt-search": "^2.10.4"
  }
}


######## file settings.js
const fs = require('fs');
const chalk = require('chalk');

global.ytname = 'YouTube: zal_x_u' // Nama YouTube Kamu
global.socialm = 'GitHub: ???' // Nama GitHub Kamu
global.location = '11 Naitōmachi, Shinjuku City, Tokyo 160-0014, Jepang' // Lokasi Kamu

global.botName = 'Mora AI' // Nama Bot Kamu
global.ownerNumber = '628812722419' // Nomor Kamu
global.ownerName = 'K.R' // Nama Kamu
global.website = 'https://rizaldev.my.canva.site/webs' // Web Kamu
global.wagc = 'https://rizaldev.my.canva.site/webs' // Web Kamu
global.packname = 'Mora AI' // Nama Pack
global.author = 'K.R' // Nama Author
global.creator = '628812722419@s.whatsapp.net' // Nomor Creator
global.premium = ['628812722419', '6283119115977', '6288213993436'] // User Premium
global.hituet = 0 // Hit Command
global.prefa = '.'; // Prefix
global.tempatDB = 'database.json'; // Tempat Database

global.saluran = '120363363009408737@newsletter' // ID Saluran Kamu
global.saluranName = 'Mora AI User Service | K.R' // Nama Saluran Kamu
global.sessionName = 'session' // Nama Folder Sesi Bot Kamu

global.panel = 'https://domainlu.my.id'; // Link Panel Kamu
global.cred = 'ptla_klUmglK7fADLZ5Br8jOwSh65IDeWAYRZuI6iQ1BIj'; // API PTLA Kamu
global.apiuser = 'ptlc_QTOmFi0ZDh0QBE5LtwCkBzSFWPZTIpz901lNybolo'; // API PTLC Kamu
global.eggs = '15', // Eggs Number (Recommended)
global.nets = '5', // Nets Number (Recommended)
global.location = '1', // Location Number (Recommended)

global.typereply = 'v4' // Gaya Reply v1-v4
global.autoblocknumber = '62' // Auto Block Number
global.antiforeignnumber = '62' // Anti Foreign Number
global.welcome = true // Auto Welcome Msg
global.anticall = true // Anti Call
global.autoswview = true // Auto View Status
global.adminevent = true // Admin Event Msg
global.groupevent = true // Group Event Msg

global.limit = {
	free: 30, // Limit User Non-premium
	premium: 9999, // Limit User Premium
	vip: 'VIP' // Limit User VIP 👑
};

global.uang = {
	free: 10000, // Uang User Non-premium
	premium: 1000000, // Uang User Premium
	vip: 10000000 // Uang User VIP 👑
};

global.bot = {
	limit: 0, // Limit Awal Bot
	uang: 0 // Uang Awal Bot
};

global.game = {
	suit: {}, // Sesi Game Suit
	menfes: {}, // Sesi Menfess
	tictactoe: {}, // Sesi Tictactoe
	kuismath: {}, // Sesi Kuis Mathematics
	tebakbom: {}, // Sesi Tebak Bom
};

global.mess = {
	admin: 'Fitur ini khusus buat admin aja ya, Kak! 🫢',
	botAdmin: 'Mora harus jadi admin dulu biar bisa jalanin ini! 😭',
	done: 'Done Kak! ✨',
	error: 'Eh, ada yang salah nih... coba lagi ya, Kak! 😖',
	group: 'Eits, fitur ini cuma bisa dipakai di grup~ 🫡',
	limit: 'Yah, limit penggunaan Kakak udah habis... 😢\n\nCoba ketik .buy untuk membeli dan menambah limit ✨',
	noCmd: 'Hmm... perintahnya gak ada di daftar Mora nih. Coba cek lagi ya, Kak! 🤔',
	nsfw: 'Fitur NSFW dimatikan di grup ini, coba minta izin ke admin dulu ya~ 🫣',
	owner: 'Hanya pemilik yang bisa akses fitur ini, Kak! 👑',
	premium: 'Fitur ini cuma buat pengguna premium, Kak! 🌟',
	private: 'Fitur ini cuma bisa dipakai di chat pribadi, Kak! 💌',
	success: 'Yeay, berhasil! 🎉',
	wait: 'Tunggu sebentar ya, Kak... Mora lagi proses nih! ⏳🤗'
};

global.thumb = fs.readFileSync('./media/icon.png'); // Buffer Image
global.thumbUrl = 'https://i.ibb.co.com/p2nKgqP/image.png'; // Url Image

let file = require.resolve(__filename)
fs.watchFile(file, () => {
	fs.unwatchFile(file)
	console.log(chalk.redBright(`Update'${__filename}'`))
	delete require.cache[file]
	require(file)
})
